[
  {
    "code": "require(\"dotenv\").config();\nconst rawKey = process.env.GEMINI_API_KEY;\nconst GEMINI_API_KEY = rawKey && rawKey.startsWith(\"sk-\") ? rawKey.substring(3) : rawKey;\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst socketIo = require(\"socket.io\");\nconst { spawn } = require(\"child_process\");\nconst axios = require(\"axios\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\nconst GEMINI_API_ENDPOINT = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\n\nif (!GEMINI_API_KEY) {\n  console.warn(\"Warning: Please set your GEMINI_API_KEY environment variable with a valid API key.\");\n}\n\napp.use(express.static(path.join(__dirname, \"public\")));\napp.get(\"/\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"Gcode.html\"));\n});\n\n// ===== Persistent Repository Storage =====\nconst repoHistoryFile = path.join(__dirname, \"repoHistory.json\");\nlet repoHistory = [];\nif (fs.existsSync(repoHistoryFile)) {\n  try {\n    const data = fs.readFileSync(repoHistoryFile, \"utf8\");\n    repoHistory = JSON.parse(data);\n  } catch (err) {\n    console.error(\"Error reading repoHistory file:\", err);\n  }\n} else {\n  repoHistory = [];\n}\nfunction saveRepoHistory() {\n  fs.writeFileSync(repoHistoryFile, JSON.stringify(repoHistory, null, 2));\n}\n// ===========================================\n\n// Global arrays for connected users\nlet users = [];\n\nio.on(\"connection\", (socket) => {\n  console.log(\"A user connected\");\n  \n  socket.on(\"setUsername\", (username) => {\n    socket.username = username;\n    if (!users.includes(username)) {\n      users.push(username);\n    }\n    io.emit(\"userList\", users);\n  });\n  \n  socket.on(\"sendMessage\", (data) => {\n    io.emit(\"chatMessage\", data);\n  });\n  \n  socket.on(\"aiSuggestion\", async (data) => {\n    const { code, language } = data;\n    try {\n      const response = await axios.post(\n        `${GEMINI_API_ENDPOINT}?key=${GEMINI_API_KEY}`,\n        { \n          contents: [{ parts: [{ text: `Suggest improvements for the following ${language} code:\\n\\n${code}` }] }] \n        },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      const suggestion = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"No suggestion received.\";\n      socket.emit(\"aiSuggestion\", suggestion);\n    } catch (error) {\n      console.error(\"Error getting AI suggestion:\", error.response?.data || error.message);\n      socket.emit(\"aiSuggestion\", \"Failed to get AI suggestion\");\n    }\n  });\n  \n  socket.on(\"aiCorrection\", async (data) => {\n    const { code, language } = data;\n    try {\n      // Improved prompt for better code correction\n      const prompt = `Analyze and correct the following ${language} code snippet. Fix any syntax errors, improve formatting, and apply best practices. Return only the corrected code as plain text without any explanations, commentary, markdown formatting, or code fences.\\n\\n${code}`;\n      const response = await axios.post(\n        `${GEMINI_API_ENDPOINT}?key=${GEMINI_API_KEY}`,\n        { contents: [{ parts: [{ text: prompt }] }] },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      const correctedCode = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"No correction received.\";\n      socket.emit(\"aiCorrection\", correctedCode);\n    } catch (error) {\n      console.error(\"Error getting AI correction:\", error.response?.data || error.message);\n      socket.emit(\"aiCorrection\", \"Failed to get AI correction\");\n    }\n  });\n  \n  socket.on(\"runCode\", (data) => {\n    const { code, language, input } = data;\n    const id = socket.id;\n    let filename, command, args;\n    if (language === \"javascript\") {\n      filename = `code-${id}.js`;\n      command = \"node\";\n      args = [filename];\n    } else if (language === \"python\") {\n      filename = `code-${id}.py`;\n      command = \"python3\";\n      args = [filename];\n    } else if (language === \"swift\") {\n      filename = `code-${id}.swift`;\n      command = \"swift\";\n      args = [filename];\n    } else if (language === \"c\") {\n      filename = `code-${id}.c`; \n      const executable = `code-${id}`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"gcc\", [filename, \"-o\", executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(`./${executable}`);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"csharp\") {\n      filename = `code-${id}.cs`; \n      const executable = `code-${id}.exe`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"mcs\", [filename, \"-out:\" + executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(\"mono\", [executable]);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"java\") {\n      filename = `Main.java`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"javac\", [filename]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(\"java\", [\"Main\"]);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(\"Main.class\", () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"cpp\") {\n      filename = `code-${id}.cpp`; \n      const executable = `code-${id}`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"g++\", [filename, \"-o\", executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(`./${executable}`);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else { \n      socket.emit(\"runtimeErrors\", \"Unsupported language.\");\n      return;\n    }\n    fs.writeFileSync(filename, code);\n    const child = spawn(command, args);\n    let output = \"\", errOutput = \"\";\n    child.stdout.on(\"data\", (data) => { output += data.toString(); });\n    child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n    child.on(\"close\", () => { \n      let combined = output; \n      if(errOutput) combined += `\\nErrors:\\n${errOutput}`; \n      socket.emit(\"runtimeErrors\", combined); \n      fs.unlink(filename, () => {}); \n    });\n    if (input) { child.stdin.write(input); child.stdin.end(); }\n  });\n  \n  // Updated saveRepo to include savedBy (username)\n  socket.on(\"saveRepo\", (data) => {\n    const { code, filePath } = data;\n    const entry = {\n      code,\n      filePath,\n      timestamp: new Date(),\n      savedBy: socket.username || \"Unknown\"\n    };\n    repoHistory.push(entry);\n    saveRepoHistory();\n    socket.emit(\"repoSaved\", \"Code saved to repo successfully.\");\n  });\n  \n  socket.on(\"sendCode\", (data) => {\n    const { code, recipients } = data;\n    const sender = socket.username || \"Anonymous\";\n    for (const [id, s] of io.of(\"/\").sockets) {\n      if (recipients.includes(s.username)) {\n        s.emit(\"receivedCode\", { from: sender, code });\n      }\n    }\n  });\n  \n  socket.on(\"disconnect\", () => {\n    console.log(\"A user disconnected\");\n    if (socket.username) { \n      users = users.filter(u => u !== socket.username); \n      io.emit(\"userList\", users); \n    }\n  });\n});\n\n// ===== Repository History Routes =====\napp.get(\"/history\", (req, res) => {\n  let html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>Repository History</title>\n    <style>\n      body { background: #000; color: #fff; font-family: 'Roboto Mono', monospace; margin: 0; padding: 20px; }\n      .container { max-width: 800px; margin: 0 auto; }\n      h1 { text-align: center; }\n      .history-list { list-style: none; padding: 0; }\n      .history-list li { padding: 10px; border-bottom: 1px solid #444; }\n      .history-list li a { color: #fff; text-decoration: none; }\n      .history-list li a:hover { text-decoration: underline; }\n      .delete-link { color: red; margin-left: 10px; text-decoration: none; }\n      .delete-link:hover { text-decoration: underline; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Repository History</h1>\n      <ul class=\"history-list\">`;\n  repoHistory.forEach((entry, i) => {\n    html += `<li>\n      <a href=\"/history/${i}\" target=\"_blank\">\n        ${entry.filePath} (${new Date(entry.timestamp).toLocaleString()})\n      </a>\n      <span> — Saved by: ${entry.savedBy || \"Unknown\"}</span>\n      <a class=\"delete-link\" href=\"/deleteRepo/${i}\" onclick=\"return confirm('Are you sure you want to permanently delete this repo entry?');\">[Delete]</a>\n    </li>`;\n  });\n  html += `\n      </ul>\n    </div>\n  </body>\n  </html>\n  `;\n  res.send(html);\n});\n\napp.get(\"/history/:id\", (req, res) => {\n  const id = parseInt(req.params.id, 10);\n  if(isNaN(id) || id < 0 || id >= repoHistory.length){ \n    res.status(404).send(\"Not found\"); \n    return; \n  }\n  const entry = repoHistory[id];\n  function escapeHtml(text) {\n    return text.replace(/&/g, \"&amp;\")\n               .replace(/</g, \"&lt;\")\n               .replace(/>/g, \"&gt;\");\n  }\n  let html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>${entry.filePath} History</title>\n    <style>\n      body { background: #000; color: #fff; font-family: 'Roboto Mono', monospace; margin: 0; padding: 20px; }\n      .container { max-width: 800px; margin: 0 auto; }\n      h1 { text-align: center; margin-bottom: 20px; }\n      .code-box { background: #111; padding: 20px; border-radius: 8px; position: relative; white-space: pre-wrap; word-wrap: break-word; }\n      pre { margin: 0; }\n      .copy-button { position: absolute; top: 10px; right: 10px; background: #333; color: #fff; border: none; padding: 5px 10px; cursor: pointer; border-radius: 4px; }\n      .copy-button:hover { background: #444; }\n      .copy-notification { position: absolute; top: 10px; right: 80px; background: #333; padding: 5px 10px; border-radius: 4px; opacity: 0; transition: opacity 0.5s; display: none; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>${entry.filePath} — Saved by ${entry.savedBy || \"Unknown\"} (${new Date(entry.timestamp).toLocaleString()})</h1>\n      <div class=\"code-box\">\n        <pre id=\"codeText\">${escapeHtml(entry.code)}</pre>\n        <button class=\"copy-button\" id=\"copyButton\">Copy</button>\n        <div class=\"copy-notification\" id=\"copyNotification\">Copied!</div>\n      </div>\n    </div>\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        const copyButton = document.getElementById('copyButton');\n        const copyNotification = document.getElementById('copyNotification');\n        const codeText = document.getElementById('codeText');\n\n        copyButton.addEventListener('click', function() {\n          const text = codeText.innerText;\n          if (navigator.clipboard && window.isSecureContext) {\n            navigator.clipboard.writeText(text).then(function() {\n              showCopyNotification();\n            }).catch(function(err) {\n              console.error('Failed to copy text: ', err);\n              fallbackCopyText(text);\n            });\n          } else {\n            fallbackCopyText(text);\n          }\n        });\n\n        function fallbackCopyText(text) {\n          const textArea = document.createElement('textarea');\n          textArea.value = text;\n          textArea.style.position = 'absolute';\n          textArea.style.left = '-9999px';\n          document.body.appendChild(textArea);\n          textArea.select();\n          try {\n            document.execCommand('copy');\n            showCopyNotification();\n          } catch (err) {\n            console.error('Fallback: Unable to copy', err);\n          }\n          document.body.removeChild(textArea);\n        }\n\n        function showCopyNotification() {\n          copyNotification.style.display = \"block\";\n          copyNotification.style.opacity = 1;\n          setTimeout(() => {\n            copyNotification.style.opacity = 0;\n            setTimeout(() => { copyNotification.style.display = \"none\"; }, 500);\n          }, 1500);\n        }\n      });\n    </script>\n  </body>\n  </html>\n  `;\n  res.send(html);\n});\n\napp.get(\"/deleteRepo/:id\", (req, res) => {\n  const id = parseInt(req.params.id, 10);\n  if(isNaN(id) || id < 0 || id >= repoHistory.length){\n    res.status(404).send(\"Not found\");\n    return;\n  }\n  repoHistory.splice(id, 1);\n  saveRepoHistory();\n  res.redirect(\"/history\");\n});\n\nserver.listen(3000, \"0.0.0.0\", () => {\n  console.log(\"Server running on http://172.16.44.186:3000\");\n});\n",
    "filePath": "comon",
    "timestamp": "2025-02-17T19:17:33.230Z",
    "savedBy": "Akash"
  },
  {
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Live Code Collaboration</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap\" rel=\"stylesheet\"/>\n  <script src=\"/socket.io/socket.io.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/codemirror.min.css\"/>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/codemirror.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/javascript/javascript.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/python/python.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/clike/clike.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/theme/monokai.min.css\"/>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/hint/show-hint.min.css\"/>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/hint/show-hint.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/lint.min.css\"/>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/lint.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jshint/2.13.4/jshint.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/javascript-lint.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: 'Roboto Mono', monospace;\n      background: #000;\n      color: #fff;\n      height: 100vh;\n      overflow: hidden;\n    }\n    #loginPage,\n    #mainPage {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n    #loginPage {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 100;\n      transition: opacity .5s;\n      background: #000;\n    }\n    #loginPage.hidden {\n      opacity: 0;\n      pointer-events: none;\n    }\n    #loginPage h1 {\n      margin-bottom: 20px;\n      font-weight: normal;\n    }\n    #loginPage input {\n      padding: 10px;\n      width: 250px;\n      border-radius: 4px;\n      border: 1px solid #444;\n      outline: none;\n      margin-bottom: 15px;\n      font-size: 16px;\n      background: #000;\n      color: #fff;\n    }\n    #loginPage button {\n      padding: 10px 20px;\n      cursor: pointer;\n      border-radius: 4px;\n      border: none;\n      background: #333;\n      color: #fff;\n      font-size: 16px;\n      transition: background .3s;\n    }\n    #loginPage button:hover {\n      background: #555;\n    }\n    #mainPage {\n      display: none;\n      padding: 10px;\n      box-sizing: border-box;\n      flex-direction: row;\n      gap: 10px;\n      z-index: 1;\n    }\n    #mainPage.visible {\n      display: flex;\n    }\n    #editorContainer {\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n      border-radius: 8px;\n      overflow: hidden;\n      box-shadow: 0 4px 8px rgba(255,255,255,.3);\n      background: #111;\n      position: relative;\n    }\n    #editorToolbar,\n    #inputContainer,\n    #breadcrumb,\n    #tabHeader,\n    #tabContent {\n      padding: 5px;\n      background: #222;\n      border-radius: 4px;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #editorToolbar {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n      flex-wrap: wrap;\n      position: relative;\n    }\n    #editorToolbar select,\n    #editorToolbar button {\n      padding: 6px 12px;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 14px;\n      font-family: 'Roboto Mono', monospace;\n      border: none;\n      transition: background .3s;\n      background: #333;\n      color: #fff;\n    }\n    #editorToolbar select:hover,\n    #editorToolbar button:hover {\n      background: #444;\n    }\n    #fileExplorer {\n      position: absolute;\n      top: 50px;\n      right: 10px;\n      width: 250px;\n      background: #222;\n      border: 1px solid #444;\n      padding: 10px;\n      border-radius: 4px;\n      display: none;\n      z-index: 15;\n      max-height: 80%;\n      overflow-y: auto;\n    }\n    #fileExplorer h3,\n    #fileExplorer button {\n      margin: 0;\n      display: block;\n    }\n    #fileExplorer button {\n      padding: 6px 12px;\n      margin: 5px 2px;\n      font-size: 14px;\n      cursor: pointer;\n      border: none;\n      border-radius: 4px;\n      background: #333;\n      color: #fff;\n      transition: background .3s;\n    }\n    #fileExplorer button:hover {\n      background: #444;\n    }\n    #fileExplorer ul {\n      list-style: none;\n      padding: 0;\n      margin: 0;\n    }\n    #fileExplorer ul ul {\n      margin-left: 20px;\n    }\n    #fileExplorer li {\n      cursor: pointer;\n      padding: 2px 5px;\n      border-radius: 3px;\n    }\n    #fileExplorer li:hover {\n      background: #333;\n    }\n    #fileExplorer li.active {\n      background: #555;\n      font-weight: bold;\n    }\n    #fileExplorer li.selected {\n      background: #666;\n      font-weight: bold;\n    }\n    #breadcrumb {\n      margin: 5px 0;\n      padding: 5px 10px;\n      background: #222;\n      border: 1px solid #444;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    #inputContainer {\n      padding: 5px;\n      background: #222;\n    }\n    #inputField {\n      width: 100%;\n      height: 50px;\n      background: #111;\n      color: #fff;\n      border: 1px solid #444;\n      border-radius: 4px;\n      padding: 5px;\n      font-size: 14px;\n    }\n    #tabHeader {\n      display: flex;\n      border-bottom: 1px solid #444;\n    }\n    #tabHeader button {\n      flex: 1;\n      padding: 10px;\n      background: #222;\n      border: none;\n      color: #fff;\n      cursor: pointer;\n      transition: background .3s;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #tabHeader button.active {\n      background: #333;\n    }\n    #tabContent {\n      position: relative;\n      flex: 1;\n      overflow: hidden;\n    }\n    #codeTab,\n    #outputTab,\n    #receivedCodeTab {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .CodeMirror {\n      height: 100% !important;\n      font-size: 16px;\n      background: #111;\n      font-family: Consolas, \"Courier New\", monospace;\n    }\n    .CodeMirror-lines {\n      padding: 10px 0;\n    }\n    #outputSection {\n      padding: 10px;\n      background: #000;\n      font-size: 14px;\n      overflow-y: auto;\n      height: 100%;\n    }\n    #receivedCodeHeader {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px;\n      background: #222;\n      position: relative;\n    }\n    #receivedCodeContent {\n      background: #111;\n      padding: 10px;\n      border-radius: 4px;\n      overflow: auto;\n      height: calc(100% - 40px);\n    }\n    /* The \"Copied!\" notification styling */\n    .copy-notification {\n      position: absolute;\n      top: 10px;\n      right: 20px;\n      background: #333;\n      color: #fff;\n      padding: 5px 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      opacity: 0;\n      transition: opacity 0.5s;\n      pointer-events: none;\n    }\n    .copy-notification.show {\n      opacity: 1;\n    }\n    #copyReceivedCodeButton {\n      padding: 6px 12px;\n      cursor: pointer;\n      border-radius: 4px;\n      border: none;\n      font-size: 14px;\n      background: #333;\n      color: #fff;\n      transition: background .3s;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #copyReceivedCodeButton:hover {\n      background: #444;\n    }\n    #sidebar {\n      width: 350px;\n      min-width: 300px;\n      background: #000;\n      border-radius: 8px;\n      padding: 10px;\n      box-shadow: 0 4px 8px rgba(255,255,255,.3);\n      display: flex;\n      flex-direction: column;\n    }\n    #sidebar h3 {\n      margin: 10px 0 5px 0;\n      font-weight: normal;\n    }\n    #users {\n      font-size: 14px;\n      list-style: none;\n      padding: 0;\n      margin: 0 0 10px 0;\n    }\n    #users li {\n      margin: 2px 0;\n    }\n    #chat {\n      flex: 1;\n      overflow-y: auto;\n      background: #111;\n      padding: 10px;\n      border-radius: 4px;\n    }\n    #chat p {\n      margin: 5px 0;\n    }\n    #messageContainer {\n      display: flex;\n      margin-top: 10px;\n    }\n    #messageInput {\n      flex: 1;\n      padding: 8px;\n      border-radius: 4px;\n      border: 1px solid #444;\n      outline: none;\n      margin-right: 8px;\n      color: #000;\n      background: #fff;\n    }\n    #messageContainer button {\n      padding: 10px 16px;\n      cursor: pointer;\n      border-radius: 4px;\n      border: none;\n      background: #333;\n      color: #fff;\n      font-size: 14px;\n      transition: background .3s;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #messageContainer button:hover {\n      background: #555;\n    }\n    /* Pop-down container for selecting recipients */\n    #sendCodeDropdown {\n      position: absolute;\n      top: 50px; /* Just below the toolbar */\n      left: 0;\n      background: #333;\n      padding: 10px;\n      border-radius: 4px;\n      border: 1px solid #444;\n      display: none;\n      z-index: 20;\n      min-width: 200px;\n    }\n    #sendCodeDropdown h4 {\n      margin: 0 0 5px;\n    }\n    #sendCodeUserList {\n      max-height: 120px;\n      overflow-y: auto;\n      margin-bottom: 10px;\n    }\n    #sendCodeUserList label {\n      display: block;\n      margin-bottom: 3px;\n    }\n    #confirmSendCodeButton {\n      padding: 6px 12px;\n      border-radius: 4px;\n      border: none;\n      font-size: 14px;\n      background: #444;\n      color: #fff;\n      font-family: 'Roboto Mono', monospace;\n      cursor: pointer;\n    }\n    #confirmSendCodeButton:hover {\n      background: #555;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"loginPage\">\n    <h1>GCode - Live Code Editor</h1>\n    <input type=\"text\" id=\"usernameInput\" placeholder=\"Enter your name\"/>\n    <input type=\"password\" id=\"passwordInput\" placeholder=\"Enter password\"/>\n    <button onclick=\"join()\">Join</button>\n  </div>\n  <div id=\"mainPage\">\n    <div id=\"editorContainer\">\n      <div id=\"editorToolbar\">\n        <select id=\"languageSelect\">\n          <option value=\"javascript\">JavaScript</option>\n          <option value=\"python\">Python</option>\n          <option value=\"c\">C</option>\n          <option value=\"csharp\">C#</option>\n          <option value=\"java\">Java</option>\n          <option value=\"swift\">Swift</option>\n          <option value=\"cpp\">C++</option>\n        </select>\n        <button id=\"aiSuggestionButton\">Get AI Suggestion</button>\n        <button id=\"aiCorrectionButton\">Code Correction</button>\n        <button id=\"sendCodeButton\">Send Code</button>\n        <button id=\"runCodeButton\">Run Code</button>\n        <button id=\"saveRepoButton\" onclick=\"saveToRepo()\">Save to Repo</button>\n        <button id=\"historyButton\" onclick=\"openHistory()\">History</button>\n        <button id=\"explorerToggleButton\" onclick=\"toggleExplorer()\">Explorer</button>\n        <!-- The hidden pop-down for selecting recipients -->\n        <div id=\"sendCodeDropdown\">\n          <h4>Select recipients</h4>\n          <div id=\"sendCodeUserList\"></div>\n          <button id=\"confirmSendCodeButton\">Send</button>\n        </div>\n      </div>\n      <div id=\"fileExplorer\">\n        <h3>Explorer</h3>\n        <button onclick=\"createNewFolder()\">New Folder</button>\n        <button onclick=\"createNewFile()\">New File</button>\n        <button onclick=\"deleteSelected()\">Delete</button>\n        <ul id=\"fileTree\"></ul>\n      </div>\n      <div id=\"inputContainer\">\n        <textarea id=\"inputField\" placeholder=\"Enter input data here\"></textarea>\n      </div>\n      <div id=\"breadcrumb\">No file selected</div>\n      <div id=\"tabHeader\">\n        <button id=\"tabCode\" class=\"active\">Code</button>\n        <button id=\"tabOutput\">Output</button>\n        <button id=\"tabReceivedCode\">Received Code</button>\n      </div>\n      <div id=\"tabContent\">\n        <div id=\"codeTab\">\n          <textarea id=\"editor\"></textarea>\n        </div>\n        <div id=\"outputTab\" style=\"display:none;\">\n          <pre id=\"outputSection\"></pre>\n        </div>\n        <div id=\"receivedCodeTab\" style=\"display:none;\">\n          <div id=\"receivedCodeHeader\">\n            <span id=\"receivedCodeSender\"></span>\n            <button id=\"copyReceivedCodeButton\">Copy</button>\n            <span id=\"copyNotification\" class=\"copy-notification\">Copied!</span>\n          </div>\n          <pre id=\"receivedCodeContent\"></pre>\n        </div>\n      </div>\n    </div>\n    <div id=\"sidebar\">\n      <h3>Online Users</h3>\n      <ul id=\"users\"></ul>\n      <h3>Chat</h3>\n      <div id=\"chat\"></div>\n      <div id=\"messageContainer\">\n        <input id=\"messageInput\" type=\"text\" placeholder=\"Type a message\"/>\n        <button onclick=\"sendMessage()\">Send</button>\n      </div>\n    </div>\n  </div>\n  <script>\n    const socket = io();\n    let username = \"\", currentAccount = null, currentUsername = \"\", currentFile = null, selectedItemPath = null;\n    let connectedUsers = [];\n\n    socket.on(\"repoSaved\", msg => alert(msg));\n\n    function getUsernameColor(n) {\n      if(n === username) return \"#00FF00\";\n      let h = 0;\n      for(let i = 0; i < n.length; i++) {\n        h = n.charCodeAt(i) + ((h << 5) - h);\n      }\n      return `hsl(${Math.abs(h) % 360},70%,50%)`;\n    }\n    \n    function getDisplayName(n) {\n      return n === username ? `(You) ${n}` : n;\n    }\n    \n    function join() {\n      const u = document.getElementById(\"usernameInput\").value.trim(),\n            p = document.getElementById(\"passwordInput\").value;\n      if(!u || !p) {\n        alert(\"Please enter both username and password.\");\n        return;\n      }\n      const ak = \"account_\" + u;\n      let ad = localStorage.getItem(ak);\n      if(ad) {\n        ad = JSON.parse(ad);\n        if(ad.password !== p) {\n          alert(\"Incorrect password.\");\n          return;\n        }\n      } else {\n        if(!confirm(\"No account found. Create a new account?\")) return;\n        ad = { password: p, fileTree: [] };\n        localStorage.setItem(ak, JSON.stringify(ad));\n      }\n      currentAccount = ad;\n      currentUsername = u;\n      username = u;\n      socket.emit(\"setUsername\", username);\n      document.getElementById(\"loginPage\").classList.add(\"hidden\");\n      setTimeout(() => {\n        document.getElementById(\"loginPage\").style.display = \"none\";\n        document.getElementById(\"mainPage\").classList.add(\"visible\");\n        loadFileTree();\n        editor.refresh();\n      }, 500);\n    }\n    \n    const editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n      mode: \"javascript\",\n      theme: \"monokai\",\n      lineNumbers: true,\n      gutters: [\"CodeMirror-lint-markers\"],\n      lint: true,\n      smartIndent: true,\n      indentUnit: 4,\n      indentWithTabs: true\n    });\n    \n    editor.on(\"change\", () => {\n      if(currentFile) {\n        currentFile.content = editor.getValue();\n        saveAccountData();\n      }\n    });\n    \n    document.getElementById(\"languageSelect\").addEventListener(\"change\", function() {\n      const lang = this.value;\n      editor.setOption(\n        \"mode\",\n        lang === \"javascript\" ? \"javascript\" :\n        lang === \"python\" ? \"python\" :\n        lang === \"c\" ? \"text/x-csrc\" :\n        lang === \"csharp\" ? \"text/x-csharp\" :\n        lang === \"java\" ? \"text/x-java\" :\n        lang === \"swift\" ? \"text/x-swift\" :\n        lang === \"cpp\" ? \"text/x-c++src\" : lang\n      );\n    });\n    \n    document.getElementById(\"aiSuggestionButton\").addEventListener(\"click\", () => {\n      socket.emit(\"aiSuggestion\", {\n        code: editor.getValue(),\n        language: document.getElementById(\"languageSelect\").value\n      });\n    });\n    \n    document.getElementById(\"aiCorrectionButton\").addEventListener(\"click\", () => {\n      socket.emit(\"aiCorrection\", {\n        code: editor.getValue(),\n        language: document.getElementById(\"languageSelect\").value\n      });\n    });\n\n    // \"Send Code\" dropdown\n    const sendCodeButton = document.getElementById(\"sendCodeButton\");\n    const sendCodeDropdown = document.getElementById(\"sendCodeDropdown\");\n    sendCodeButton.addEventListener(\"click\", () => {\n      if(sendCodeDropdown.style.display === \"none\" || !sendCodeDropdown.style.display) {\n        buildSendUserList();\n        sendCodeDropdown.style.display = \"block\";\n      } else {\n        sendCodeDropdown.style.display = \"none\";\n      }\n    });\n\n    function buildSendUserList() {\n      const container = document.getElementById(\"sendCodeUserList\");\n      container.innerHTML = \"\";\n      connectedUsers.forEach(user => {\n        if(user !== username) {\n          const label = document.createElement(\"label\");\n          const checkbox = document.createElement(\"input\");\n          checkbox.type = \"checkbox\";\n          checkbox.value = user;\n          label.appendChild(checkbox);\n          label.appendChild(document.createTextNode(\" \" + user));\n          container.appendChild(label);\n        }\n        container.appendChild(document.createElement(\"br\"));\n      });\n    }\n\n    document.getElementById(\"confirmSendCodeButton\").addEventListener(\"click\", () => {\n      const checkedBoxes = document.querySelectorAll(\"#sendCodeUserList input[type='checkbox']:checked\");\n      const recipients = Array.from(checkedBoxes).map(cb => cb.value);\n      if(recipients.length === 0) {\n        alert(\"No recipients selected!\");\n        return;\n      }\n      socket.emit(\"sendCode\", { code: editor.getValue(), recipients });\n      sendCodeDropdown.style.display = \"none\";\n    });\n\n    document.getElementById(\"runCodeButton\").addEventListener(\"click\", () => {\n      socket.emit(\"runCode\", {\n        code: editor.getValue(),\n        language: document.getElementById(\"languageSelect\").value,\n        input: document.getElementById(\"inputField\").value\n      });\n    });\n    \n    socket.on(\"userList\", u => {\n      connectedUsers = u;\n      const ul = document.getElementById(\"users\");\n      ul.innerHTML = \"\";\n      u.forEach(n => {\n        const li = document.createElement(\"li\");\n        li.textContent = getDisplayName(n);\n        li.style.color = getUsernameColor(n);\n        ul.appendChild(li);\n      });\n    });\n    \n    socket.on(\"receivedCode\", d => {\n      document.getElementById(\"receivedCodeSender\").textContent = `${d.from} sent you code`;\n      document.getElementById(\"receivedCodeContent\").textContent = d.code;\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.add(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"block\";\n    });\n    \n    document.getElementById(\"tabCode\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabCode\").classList.add(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"block\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"none\";\n      editor.refresh();\n    });\n    \n    document.getElementById(\"tabOutput\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabOutput\").classList.add(\"active\");\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"block\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"none\";\n    });\n    \n    document.getElementById(\"tabReceivedCode\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabReceivedCode\").classList.add(\"active\");\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"block\";\n    });\n\n    /* --- Copy Button Fix for Received Code --- */\n    document.getElementById(\"copyReceivedCodeButton\").addEventListener(\"click\", copyReceivedCode);\n\n    function copyReceivedCode() {\n      const code = document.getElementById(\"receivedCodeContent\").innerText;\n      // If the modern API is available, use it\n      if(navigator.clipboard) {\n        navigator.clipboard.writeText(code).then(() => {\n          showCopyNotification();\n        }).catch(err => {\n          console.error(\"Failed to copy code\", err);\n        });\n      } else {\n        // fallback for older browsers\n        fallbackCopyText(code);\n      }\n    }\n\n    function fallbackCopyText(text) {\n      const textarea = document.createElement(\"textarea\");\n      textarea.value = text;\n      // hide it offscreen\n      textarea.style.position = 'fixed';\n      textarea.style.left = '-9999px';\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        showCopyNotification();\n      } catch (err) {\n        console.error(\"Fallback: Unable to copy\", err);\n      }\n      document.body.removeChild(textarea);\n    }\n\n    function showCopyNotification() {\n      const n = document.getElementById(\"copyNotification\");\n      n.classList.add(\"show\");\n      setTimeout(() => {\n        n.classList.remove(\"show\");\n      }, 1500);\n    }\n    /* --- End Copy Fix --- */\n\n    function sendMessage() {\n      const m = document.getElementById(\"messageInput\").value.trim();\n      if(m) {\n        socket.emit(\"sendMessage\", {\n          username,\n          message: m\n        });\n        document.getElementById(\"messageInput\").value = \"\";\n      }\n    }\n    \n    socket.on(\"aiSuggestion\", s => {\n      alert(s ? \"AI Suggestion: \" + s : \"No suggestion received.\");\n    });\n    \n    socket.on(\"aiCorrection\", c => {\n      if(c && c !== \"Failed to get AI correction\") {\n        editor.setValue(c);\n        alert(\"Code corrected and updated in editor.\");\n      } else {\n        alert(\"AI Correction failed. Please check your API key or try again.\");\n      }\n    });\n    \n    socket.on(\"runtimeErrors\", o => {\n      document.getElementById(\"outputSection\").innerHTML = o || \"No output.\";\n    });\n    \n    socket.on(\"chatMessage\", d => {\n      const p = document.createElement(\"p\"),\n            span = document.createElement(\"span\");\n      span.textContent = getDisplayName(d.username);\n      span.style.color = getUsernameColor(d.username);\n      p.appendChild(span);\n      p.appendChild(document.createTextNode(\": \" + d.message));\n      document.getElementById(\"chat\").appendChild(p);\n      document.getElementById(\"chat\").scrollTop = document.getElementById(\"chat\").scrollHeight;\n    });\n    \n    function toggleExplorer() {\n      const e = document.getElementById(\"fileExplorer\");\n      e.style.display = (e.style.display === \"none\" || !e.style.display) ? \"block\" : \"none\";\n    }\n    \n    function loadFileTree() {\n      const t = currentAccount.fileTree || [];\n      renderFileTree(t, document.getElementById(\"fileTree\"));\n    }\n    \n    function renderFileTree(tree, container, currentPath = \"\") {\n      container.innerHTML = \"\";\n      tree.forEach((item, index) => {\n        const li = document.createElement(\"li\"),\n              fullPath = currentPath ? currentPath + \" → \" + item.name : item.name;\n        li.textContent = item.name;\n        li.dataset.fullPath = fullPath;\n        li.dataset.index = index;\n        li.dataset.type = item.type;\n        if(item.type === \"file\" && currentFile && currentFile.name === item.name)\n          li.classList.add(\"active\");\n        if(selectedItemPath && li.dataset.fullPath === selectedItemPath)\n          li.classList.add(\"selected\");\n        if(item.type === \"file\") {\n          li.addEventListener(\"click\", () => {\n            selectItem(li);\n            openFile(item, fullPath);\n          });\n        } else if(item.type === \"folder\") {\n          li.addEventListener(\"click\", e => {\n            e.stopPropagation();\n            selectItem(li);\n            const childUl = li.querySelector(\"ul\");\n            if(childUl)\n              childUl.style.display = childUl.style.display === \"none\" ? \"block\" : \"none\";\n          });\n          if(item.children && item.children.length) {\n            const childUl = document.createElement(\"ul\");\n            renderFileTree(item.children, childUl, fullPath);\n            li.appendChild(childUl);\n          }\n        }\n        container.appendChild(li);\n      });\n    }\n    \n    function selectItem(li) {\n      selectedItemPath = li.dataset.fullPath;\n      document.querySelectorAll(\"#fileExplorer li\").forEach(el => el.classList.remove(\"selected\"));\n      li.classList.add(\"selected\");\n    }\n    \n    function openFile(file, fullPath) {\n      if(file.type === \"file\") {\n        currentFile = file;\n        editor.setValue(file.content || \"\");\n        editor.refresh();\n        document.getElementById(\"breadcrumb\").textContent = fullPath;\n      }\n    }\n    \n    function createNewFile() {\n      const n = prompt(\"Enter new file name:\");\n      if(!n) return;\n      currentAccount.fileTree.push({\n        type: \"file\",\n        name: n,\n        content: \"\"\n      });\n      saveAccountData();\n      loadFileTree();\n    }\n    \n    function createNewFolder() {\n      const n = prompt(\"Enter new folder name:\");\n      if(!n) return;\n      currentAccount.fileTree.push({\n        type: \"folder\",\n        name: n,\n        children: []\n      });\n      saveAccountData();\n      loadFileTree();\n    }\n    \n    function deleteSelected() {\n      if(!selectedItemPath) {\n        alert(\"No file or folder selected to delete.\");\n        return;\n      }\n      if(!confirm(\"Are you sure you want to delete the selected item?\")) return;\n      const segments = selectedItemPath.split(\" → \");\n      \n      function deleteFromTree(tree, segments) {\n        if(!segments.length) return false;\n        const nameToDelete = segments[0];\n        for(let i = 0; i < tree.length; i++) {\n          if(tree[i].name === nameToDelete) {\n            if(segments.length === 1) {\n              tree.splice(i, 1);\n              return true;\n            } else if(tree[i].type === \"folder\" && tree[i].children) {\n              if(deleteFromTree(tree[i].children, segments.slice(1))) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      }\n      \n      if(deleteFromTree(currentAccount.fileTree, segments)) {\n        saveAccountData();\n        selectedItemPath = null;\n        if(currentFile && currentFile.name === segments[segments.length - 1]) {\n          currentFile = null;\n          editor.setValue(\"\");\n          document.getElementById(\"breadcrumb\").textContent = \"No file selected\";\n        }\n        loadFileTree();\n      } else {\n        alert(\"Item not found.\");\n      }\n    }\n    \n    function saveAccountData() {\n      localStorage.setItem(\"account_\" + currentUsername, JSON.stringify(currentAccount));\n    }\n    \n    function saveToRepo() {\n      if(!currentFile) {\n        alert(\"No file open to save.\");\n        return;\n      }\n      const code = editor.getValue(),\n            fp = document.getElementById(\"breadcrumb\").textContent.replace(/ → /g, \"->\");\n      socket.emit(\"saveRepo\", { code, filePath: fp });\n    }\n    \n    function openHistory() {\n      window.open(\"/history\", \"_blank\");\n    }\n  </script>\n</body>\n</html>\n",
    "filePath": "html file",
    "timestamp": "2025-02-17T19:18:26.220Z",
    "savedBy": "Akash"
  },
  {
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Live Code Collaboration</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap\" rel=\"stylesheet\"/>\n  <script src=\"/socket.io/socket.io.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/codemirror.min.css\"/>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/codemirror.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/javascript/javascript.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/python/python.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/clike/clike.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/theme/monokai.min.css\"/>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/hint/show-hint.min.css\"/>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/hint/show-hint.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/lint.min.css\"/>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/lint.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jshint/2.13.4/jshint.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/javascript-lint.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: 'Roboto Mono', monospace;\n      background: #000;\n      color: #fff;\n      height: 100vh;\n      overflow: hidden;\n    }\n    #loginPage,\n    #mainPage {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n    #loginPage {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 100;\n      transition: opacity .5s;\n      background: #000;\n    }\n    #loginPage.hidden {\n      opacity: 0;\n      pointer-events: none;\n    }\n    #loginPage h1 {\n      margin-bottom: 20px;\n      font-weight: normal;\n    }\n    #loginPage input {\n      padding: 10px;\n      width: 250px;\n      border-radius: 4px;\n      border: 1px solid #444;\n      outline: none;\n      margin-bottom: 15px;\n      font-size: 16px;\n      background: #000;\n      color: #fff;\n    }\n    #loginPage button {\n      padding: 10px 20px;\n      cursor: pointer;\n      border-radius: 4px;\n      border: none;\n      background: #333;\n      color: #fff;\n      font-size: 16px;\n      transition: background .3s;\n    }\n    #loginPage button:hover {\n      background: #555;\n    }\n    #mainPage {\n      display: none;\n      padding: 10px;\n      box-sizing: border-box;\n      flex-direction: row;\n      gap: 10px;\n      z-index: 1;\n    }\n    #mainPage.visible {\n      display: flex;\n    }\n    #editorContainer {\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n      border-radius: 8px;\n      overflow: hidden;\n      box-shadow: 0 4px 8px rgba(255,255,255,.3);\n      background: #111;\n      position: relative;\n    }\n    #editorToolbar,\n    #inputContainer,\n    #breadcrumb,\n    #tabHeader,\n    #tabContent {\n      padding: 5px;\n      background: #222;\n      border-radius: 4px;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #editorToolbar {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n      flex-wrap: wrap;\n      position: relative;\n    }\n    #editorToolbar select,\n    #editorToolbar button {\n      padding: 6px 12px;\n      cursor: pointer;\n      border-radius: 4px;\n      font-size: 14px;\n      font-family: 'Roboto Mono', monospace;\n      border: none;\n      transition: background .3s;\n      background: #333;\n      color: #fff;\n    }\n    #editorToolbar select:hover,\n    #editorToolbar button:hover {\n      background: #444;\n    }\n    #fileExplorer {\n      position: absolute;\n      top: 50px;\n      right: 10px;\n      width: 250px;\n      background: #222;\n      border: 1px solid #444;\n      padding: 10px;\n      border-radius: 4px;\n      display: none;\n      z-index: 15;\n      max-height: 80%;\n      overflow-y: auto;\n    }\n    #fileExplorer h3,\n    #fileExplorer button {\n      margin: 0;\n      display: block;\n    }\n    #fileExplorer button {\n      padding: 6px 12px;\n      margin: 5px 2px;\n      font-size: 14px;\n      cursor: pointer;\n      border: none;\n      border-radius: 4px;\n      background: #333;\n      color: #fff;\n      transition: background .3s;\n    }\n    #fileExplorer button:hover {\n      background: #444;\n    }\n    #fileExplorer ul {\n      list-style: none;\n      padding: 0;\n      margin: 0;\n    }\n    #fileExplorer ul ul {\n      margin-left: 20px;\n    }\n    #fileExplorer li {\n      cursor: pointer;\n      padding: 2px 5px;\n      border-radius: 3px;\n    }\n    #fileExplorer li:hover {\n      background: #333;\n    }\n    #fileExplorer li.active {\n      background: #555;\n      font-weight: bold;\n    }\n    #fileExplorer li.selected {\n      background: #666;\n      font-weight: bold;\n    }\n    #breadcrumb {\n      margin: 5px 0;\n      padding: 5px 10px;\n      background: #222;\n      border: 1px solid #444;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    #inputContainer {\n      padding: 5px;\n      background: #222;\n    }\n    #inputField {\n      width: 100%;\n      height: 50px;\n      background: #111;\n      color: #fff;\n      border: 1px solid #444;\n      border-radius: 4px;\n      padding: 5px;\n      font-size: 14px;\n    }\n    #tabHeader {\n      display: flex;\n      border-bottom: 1px solid #444;\n    }\n    #tabHeader button {\n      flex: 1;\n      padding: 10px;\n      background: #222;\n      border: none;\n      color: #fff;\n      cursor: pointer;\n      transition: background .3s;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #tabHeader button.active {\n      background: #333;\n    }\n    #tabContent {\n      position: relative;\n      flex: 1;\n      overflow: hidden;\n    }\n    #codeTab,\n    #outputTab,\n    #receivedCodeTab {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .CodeMirror {\n      height: 100% !important;\n      font-size: 16px;\n      background: #111;\n      font-family: Consolas, \"Courier New\", monospace;\n    }\n    .CodeMirror-lines {\n      padding: 10px 0;\n    }\n    #outputSection {\n      padding: 10px;\n      background: #000;\n      font-size: 14px;\n      overflow-y: auto;\n      height: 100%;\n    }\n    #receivedCodeHeader {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 5px;\n      background: #222;\n      position: relative;\n    }\n    #receivedCodeContent {\n      background: #111;\n      padding: 10px;\n      border-radius: 4px;\n      overflow: auto;\n      height: calc(100% - 40px);\n    }\n    .copy-notification {\n      position: absolute;\n      top: 10px;\n      right: 20px;\n      background: #333;\n      color: #fff;\n      padding: 5px 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      opacity: 0;\n      transition: opacity 0.5s;\n      pointer-events: none;\n    }\n    .copy-notification.show {\n      opacity: 1;\n    }\n    #copyReceivedCodeButton {\n      padding: 6px 12px;\n      cursor: pointer;\n      border-radius: 4px;\n      border: none;\n      font-size: 14px;\n      background: #333;\n      color: #fff;\n      transition: background 0.3s;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #copyReceivedCodeButton:hover {\n      background: #444;\n    }\n    #sidebar {\n      width: 350px;\n      min-width: 300px;\n      background: #000;\n      border-radius: 8px;\n      padding: 10px;\n      box-shadow: 0 4px 8px rgba(255,255,255,0.3);\n      display: flex;\n      flex-direction: column;\n    }\n    #sidebar h3 {\n      margin: 10px 0 5px 0;\n      font-weight: normal;\n    }\n    #users {\n      font-size: 14px;\n      list-style: none;\n      padding: 0;\n      margin: 0 0 10px 0;\n    }\n    #users li {\n      margin: 2px 0;\n    }\n    #chat {\n      flex: 1;\n      overflow-y: auto;\n      background: #111;\n      padding: 10px;\n      border-radius: 4px;\n    }\n    #chat p {\n      margin: 5px 0;\n    }\n    #messageContainer {\n      display: flex;\n      margin-top: 10px;\n    }\n    #messageInput {\n      flex: 1;\n      padding: 8px;\n      border-radius: 4px;\n      border: 1px solid #444;\n      outline: none;\n      margin-right: 8px;\n      color: #000;\n      background: #fff;\n    }\n    #messageContainer button {\n      padding: 10px 16px;\n      cursor: pointer;\n      border-radius: 4px;\n      border: none;\n      background: #333;\n      color: #fff;\n      font-size: 14px;\n      transition: background 0.3s;\n      font-family: 'Roboto Mono', monospace;\n    }\n    #messageContainer button:hover {\n      background: #555;\n    }\n    #sendCodeDropdown {\n      position: absolute;\n      top: 50px;\n      left: 0;\n      background: #333;\n      padding: 10px;\n      border-radius: 4px;\n      border: 1px solid #444;\n      display: none;\n      z-index: 20;\n      min-width: 200px;\n    }\n    #sendCodeDropdown h4 {\n      margin: 0 0 5px;\n    }\n    #sendCodeUserList {\n      max-height: 120px;\n      overflow-y: auto;\n      margin-bottom: 10px;\n    }\n    #sendCodeUserList label {\n      display: block;\n      margin-bottom: 3px;\n    }\n    #confirmSendCodeButton {\n      padding: 6px 12px;\n      border-radius: 4px;\n      border: none;\n      font-size: 14px;\n      background: #444;\n      color: #fff;\n      font-family: 'Roboto Mono', monospace;\n      cursor: pointer;\n    }\n    #confirmSendCodeButton:hover {\n      background: #555;\n    }\n\n    /* --- Custom Overrides for CodeMirror Hints --- */\n    .CodeMirror-hints {\n      background: #222 !important;\n      color: #fff !important;\n      font-family: 'Roboto Mono', monospace;\n      border: 1px solid #444 !important;\n    }\n    .CodeMirror-hint {\n      background: #222 !important;\n      color: #fff !important;\n      font-family: 'Roboto Mono', monospace;\n    }\n    .CodeMirror-hint-active {\n      background: #333 !important;\n      color: #fff !important;\n      font-family: 'Roboto Mono', monospace;\n    }\n    /* --- End Custom Overrides --- */\n  </style>\n</head>\n<body>\n  <div id=\"loginPage\">\n    <h1>GCode - Live Code Editor</h1>\n    <input type=\"text\" id=\"usernameInput\" placeholder=\"Enter your name\"/>\n    <input type=\"password\" id=\"passwordInput\" placeholder=\"Enter password\"/>\n    <button onclick=\"join()\">Join</button>\n  </div>\n  <div id=\"mainPage\">\n    <div id=\"editorContainer\">\n      <div id=\"editorToolbar\">\n        <select id=\"languageSelect\">\n          <option value=\"javascript\">JavaScript</option>\n          <option value=\"python\">Python</option>\n          <option value=\"c\">C</option>\n          <option value=\"csharp\">C#</option>\n          <option value=\"java\">Java</option>\n          <option value=\"swift\">Swift</option>\n          <option value=\"cpp\">C++</option>\n        </select>\n        <button id=\"aiSuggestionButton\">Get AI Suggestion</button>\n        <button id=\"aiCorrectionButton\">Code Correction</button>\n        <button id=\"sendCodeButton\">Send Code</button>\n        <button id=\"runCodeButton\">Run Code</button>\n        <button id=\"saveRepoButton\" onclick=\"saveToRepo()\">Save to Repo</button>\n        <button id=\"historyButton\" onclick=\"openHistory()\">History</button>\n        <button id=\"explorerToggleButton\" onclick=\"toggleExplorer()\">Explorer</button>\n        <div id=\"sendCodeDropdown\">\n          <h4>Select recipients</h4>\n          <div id=\"sendCodeUserList\"></div>\n          <button id=\"confirmSendCodeButton\">Send</button>\n        </div>\n      </div>\n      <div id=\"fileExplorer\">\n        <h3>Explorer</h3>\n        <button onclick=\"createNewFolder()\">New Folder</button>\n        <button onclick=\"createNewFile()\">New File</button>\n        <button onclick=\"deleteSelected()\">Delete</button>\n        <ul id=\"fileTree\"></ul>\n      </div>\n      <div id=\"inputContainer\">\n        <textarea id=\"inputField\" placeholder=\"Enter input data here\"></textarea>\n      </div>\n      <div id=\"breadcrumb\">No file selected</div>\n      <div id=\"tabHeader\">\n        <button id=\"tabCode\" class=\"active\">Code</button>\n        <button id=\"tabOutput\">Output</button>\n        <button id=\"tabReceivedCode\">Received Code</button>\n      </div>\n      <div id=\"tabContent\">\n        <div id=\"codeTab\">\n          <textarea id=\"editor\"></textarea>\n        </div>\n        <div id=\"outputTab\" style=\"display:none;\">\n          <pre id=\"outputSection\"></pre>\n        </div>\n        <div id=\"receivedCodeTab\" style=\"display:none;\">\n          <div id=\"receivedCodeHeader\">\n            <span id=\"receivedCodeSender\"></span>\n            <button id=\"copyReceivedCodeButton\">Copy</button>\n            <span id=\"copyNotification\" class=\"copy-notification\">Copied!</span>\n          </div>\n          <pre id=\"receivedCodeContent\"></pre>\n        </div>\n      </div>\n    </div>\n    <div id=\"sidebar\">\n      <h3>Online Users</h3>\n      <ul id=\"users\"></ul>\n      <h3>Chat</h3>\n      <div id=\"chat\"></div>\n      <div id=\"messageContainer\">\n        <input id=\"messageInput\" type=\"text\" placeholder=\"Type a message\"/>\n        <button onclick=\"sendMessage()\">Send</button>\n      </div>\n    </div>\n  </div>\n  <script>\n    const socket = io();\n    let username = \"\", currentAccount = null, currentUsername = \"\", currentFile = null;\n    // Store the full path and type of the currently selected item in the explorer\n    let selectedItemPath = null, selectedItemType = null;\n    let connectedUsers = [];\n\n    socket.on(\"repoSaved\", msg => alert(msg));\n\n    function getUsernameColor(n) {\n      if(n === username) return \"#00FF00\";\n      let h = 0;\n      for(let i = 0; i < n.length; i++) {\n        h = n.charCodeAt(i) + ((h << 5) - h);\n      }\n      return `hsl(${Math.abs(h) % 360},70%,50%)`;\n    }\n    \n    function getDisplayName(n) {\n      return n === username ? `(You) ${n}` : n;\n    }\n    \n    function join() {\n      const u = document.getElementById(\"usernameInput\").value.trim(),\n            p = document.getElementById(\"passwordInput\").value;\n      if(!u || !p) {\n        alert(\"Please enter both username and password.\");\n        return;\n      }\n      const ak = \"account_\" + u;\n      let ad = localStorage.getItem(ak);\n      if(ad) {\n        ad = JSON.parse(ad);\n        if(ad.password !== p) {\n          alert(\"Incorrect password.\");\n          return;\n        }\n      } else {\n        if(!confirm(\"No account found. Create a new account?\")) return;\n        ad = { password: p, fileTree: [] };\n        localStorage.setItem(ak, JSON.stringify(ad));\n      }\n      currentAccount = ad;\n      currentUsername = u;\n      username = u;\n      socket.emit(\"setUsername\", username);\n      document.getElementById(\"loginPage\").classList.add(\"hidden\");\n      setTimeout(() => {\n        document.getElementById(\"loginPage\").style.display = \"none\";\n        document.getElementById(\"mainPage\").classList.add(\"visible\");\n        loadFileTree();\n        editor.refresh();\n      }, 500);\n    }\n    \n    const editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n      mode: \"javascript\",\n      theme: \"monokai\",\n      lineNumbers: true,\n      gutters: [\"CodeMirror-lint-markers\"],\n      lint: { esversion: 6 },\n      smartIndent: true,\n      indentUnit: 4,\n      indentWithTabs: true,\n      extraKeys: { \"Ctrl-Space\": \"autocomplete\" }\n    });\n    \n    editor.on(\"change\", () => {\n      if(currentFile) {\n        currentFile.content = editor.getValue();\n        saveAccountData();\n      }\n    });\n    \n    document.getElementById(\"languageSelect\").addEventListener(\"change\", function() {\n      const lang = this.value;\n      editor.setOption(\n        \"mode\",\n        lang === \"javascript\" ? \"javascript\" :\n        lang === \"python\" ? \"python\" :\n        lang === \"c\" ? \"text/x-csrc\" :\n        lang === \"csharp\" ? \"text/x-csharp\" :\n        lang === \"java\" ? \"text/x-java\" :\n        lang === \"swift\" ? \"text/x-swift\" :\n        lang === \"cpp\" ? \"text/x-c++src\" : lang\n      );\n    });\n    \n    document.getElementById(\"aiSuggestionButton\").addEventListener(\"click\", () => {\n      socket.emit(\"aiSuggestion\", {\n        code: editor.getValue(),\n        language: document.getElementById(\"languageSelect\").value\n      });\n    });\n    \n    document.getElementById(\"aiCorrectionButton\").addEventListener(\"click\", () => {\n      socket.emit(\"aiCorrection\", {\n        code: editor.getValue(),\n        language: document.getElementById(\"languageSelect\").value\n      });\n    });\n\n    const sendCodeButton = document.getElementById(\"sendCodeButton\");\n    const sendCodeDropdown = document.getElementById(\"sendCodeDropdown\");\n    sendCodeButton.addEventListener(\"click\", () => {\n      if(sendCodeDropdown.style.display === \"none\" || !sendCodeDropdown.style.display) {\n        buildSendUserList();\n        sendCodeDropdown.style.display = \"block\";\n      } else {\n        sendCodeDropdown.style.display = \"none\";\n      }\n    });\n\n    function buildSendUserList() {\n      const container = document.getElementById(\"sendCodeUserList\");\n      container.innerHTML = \"\";\n      connectedUsers.forEach(user => {\n        if(user !== username) {\n          const label = document.createElement(\"label\");\n          const checkbox = document.createElement(\"input\");\n          checkbox.type = \"checkbox\";\n          checkbox.value = user;\n          label.appendChild(checkbox);\n          label.appendChild(document.createTextNode(\" \" + user));\n          container.appendChild(label);\n        }\n        container.appendChild(document.createElement(\"br\"));\n      });\n    }\n\n    document.getElementById(\"confirmSendCodeButton\").addEventListener(\"click\", () => {\n      const checkedBoxes = document.querySelectorAll(\"#sendCodeUserList input[type='checkbox']:checked\");\n      const recipients = Array.from(checkedBoxes).map(cb => cb.value);\n      if(recipients.length === 0) {\n        alert(\"No recipients selected!\");\n        return;\n      }\n      socket.emit(\"sendCode\", { code: editor.getValue(), recipients });\n      sendCodeDropdown.style.display = \"none\";\n    });\n\n    document.getElementById(\"runCodeButton\").addEventListener(\"click\", () => {\n      socket.emit(\"runCode\", {\n        code: editor.getValue(),\n        language: document.getElementById(\"languageSelect\").value,\n        input: document.getElementById(\"inputField\").value\n      });\n    });\n    \n    socket.on(\"userList\", u => {\n      connectedUsers = u;\n      const ul = document.getElementById(\"users\");\n      ul.innerHTML = \"\";\n      u.forEach(n => {\n        const li = document.createElement(\"li\");\n        li.textContent = getDisplayName(n);\n        li.style.color = getUsernameColor(n);\n        ul.appendChild(li);\n      });\n    });\n    \n    socket.on(\"receivedCode\", d => {\n      document.getElementById(\"receivedCodeSender\").textContent = `${d.from} sent you code`;\n      document.getElementById(\"receivedCodeContent\").textContent = d.code;\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.add(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"block\";\n    });\n    \n    document.getElementById(\"tabCode\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabCode\").classList.add(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"block\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"none\";\n      editor.refresh();\n    });\n    \n    document.getElementById(\"tabOutput\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabOutput\").classList.add(\"active\");\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"block\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"none\";\n    });\n    \n    document.getElementById(\"tabReceivedCode\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabReceivedCode\").classList.add(\"active\");\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"block\";\n    });\n\n    document.getElementById(\"copyReceivedCodeButton\").addEventListener(\"click\", copyReceivedCode);\n\n    function copyReceivedCode() {\n      const code = document.getElementById(\"receivedCodeContent\").innerText;\n      if(navigator.clipboard) {\n        navigator.clipboard.writeText(code).then(() => {\n          showCopyNotification();\n        }).catch(err => {\n          console.error(\"Failed to copy code\", err);\n        });\n      } else {\n        fallbackCopyText(code);\n      }\n    }\n\n    function fallbackCopyText(text) {\n      const textarea = document.createElement(\"textarea\");\n      textarea.value = text;\n      textarea.style.position = 'fixed';\n      textarea.style.left = '-9999px';\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        showCopyNotification();\n      } catch (err) {\n        console.error(\"Fallback: Unable to copy\", err);\n      }\n      document.body.removeChild(textarea);\n    }\n\n    function showCopyNotification() {\n      const n = document.getElementById(\"copyNotification\");\n      n.classList.add(\"show\");\n      setTimeout(() => {\n        n.classList.remove(\"show\");\n      }, 1500);\n    }\n\n    function sendMessage() {\n      const m = document.getElementById(\"messageInput\").value.trim();\n      if(m) {\n        socket.emit(\"sendMessage\", {\n          username,\n          message: m\n        });\n        document.getElementById(\"messageInput\").value = \"\";\n      }\n    }\n    \n    socket.on(\"aiSuggestion\", s => {\n      alert(s ? \"AI Suggestion: \" + s : \"No suggestion received.\");\n    });\n    \n    socket.on(\"aiCorrection\", c => {\n      if(c && c !== \"Failed to get AI correction\") {\n        editor.setValue(c);\n        alert(\"Code corrected and updated in editor.\");\n      } else {\n        alert(\"AI Correction failed. Please check your API key or try again.\");\n      }\n    });\n    \n    socket.on(\"runtimeErrors\", o => {\n      document.getElementById(\"outputSection\").innerHTML = o || \"No output.\";\n    });\n    \n    socket.on(\"chatMessage\", d => {\n      const p = document.createElement(\"p\"),\n            span = document.createElement(\"span\");\n      span.textContent = getDisplayName(d.username);\n      span.style.color = getUsernameColor(d.username);\n      p.appendChild(span);\n      p.appendChild(document.createTextNode(\": \" + d.message));\n      document.getElementById(\"chat\").appendChild(p);\n      document.getElementById(\"chat\").scrollTop = document.getElementById(\"chat\").scrollHeight;\n    });\n    \n    function toggleExplorer() {\n      const e = document.getElementById(\"fileExplorer\");\n      e.style.display = (e.style.display === \"none\" || !e.style.display) ? \"block\" : \"none\";\n    }\n    \n    function loadFileTree() {\n      const t = currentAccount.fileTree || [];\n      renderFileTree(t, document.getElementById(\"fileTree\"));\n    }\n    \n    // Render the file tree using \"/\" as the separator for the full path.\n    function renderFileTree(tree, container, currentPath = \"\") {\n      container.innerHTML = \"\";\n      tree.forEach((item, index) => {\n        const li = document.createElement(\"li\");\n        const fullPath = currentPath ? currentPath + \"/\" + item.name : item.name;\n        li.textContent = item.name;\n        li.dataset.fullPath = fullPath;\n        li.dataset.index = index;\n        li.dataset.type = item.type;\n        if(item.type === \"file\" && currentFile && currentFile.name === item.name)\n          li.classList.add(\"active\");\n        if(selectedItemPath && li.dataset.fullPath === selectedItemPath)\n          li.classList.add(\"selected\");\n        if(item.type === \"file\") {\n          li.addEventListener(\"click\", () => {\n            selectItem(li);\n            openFile(item, fullPath);\n          });\n        } else if(item.type === \"folder\") {\n          li.addEventListener(\"click\", e => {\n            e.stopPropagation();\n            selectItem(li);\n            const childUl = li.querySelector(\"ul\");\n            if(childUl)\n              childUl.style.display = childUl.style.display === \"none\" ? \"block\" : \"none\";\n          });\n          if(item.children && item.children.length) {\n            const childUl = document.createElement(\"ul\");\n            renderFileTree(item.children, childUl, fullPath);\n            li.appendChild(childUl);\n          }\n        }\n        container.appendChild(li);\n      });\n    }\n    \n    // Set the currently selected item's full path and type.\n    function selectItem(li) {\n      selectedItemPath = li.dataset.fullPath;\n      selectedItemType = li.dataset.type;\n      document.querySelectorAll(\"#fileExplorer li\").forEach(el => el.classList.remove(\"selected\"));\n      li.classList.add(\"selected\");\n    }\n    \n    // Open the file and update the breadcrumb with the full path.\n    function openFile(file, fullPath) {\n      if(file.type === \"file\") {\n        currentFile = file;\n        editor.setValue(file.content || \"\");\n        editor.refresh();\n        document.getElementById(\"breadcrumb\").textContent = fullPath;\n      }\n    }\n    \n    // Helper: Find an item in the tree given an array of path segments.\n    function findItemByPath(tree, segments) {\n      if (!segments.length) return null;\n      const name = segments[0];\n      for (let item of tree) {\n        if (item.name === name) {\n          if (segments.length === 1) {\n            return item;\n          } else if (item.type === \"folder\" && item.children) {\n            return findItemByPath(item.children, segments.slice(1));\n          }\n        }\n      }\n      return null;\n    }\n    \n    // Create a new file. If a folder is selected, add the file inside that folder;\n    // otherwise, add it to the root.\n    function createNewFile() {\n      const n = prompt(\"Enter new file name:\");\n      if(!n) return;\n      if(selectedItemType === \"folder\") {\n        const segments = selectedItemPath.split(\"/\");\n        const folder = findItemByPath(currentAccount.fileTree, segments);\n        if(folder && folder.type === \"folder\") {\n          if(!folder.children) folder.children = [];\n          folder.children.push({\n            type: \"file\",\n            name: n,\n            content: \"\"\n          });\n        }\n      } else {\n        currentAccount.fileTree.push({\n          type: \"file\",\n          name: n,\n          content: \"\"\n        });\n      }\n      saveAccountData();\n      loadFileTree();\n    }\n    \n    // Create a new folder. If a folder is selected, add the folder inside that folder;\n    // otherwise, add it to the root.\n    function createNewFolder() {\n      const n = prompt(\"Enter new folder name:\");\n      if(!n) return;\n      if(selectedItemType === \"folder\") {\n        const segments = selectedItemPath.split(\"/\");\n        const folder = findItemByPath(currentAccount.fileTree, segments);\n        if(folder && folder.type === \"folder\") {\n          if(!folder.children) folder.children = [];\n          folder.children.push({\n            type: \"folder\",\n            name: n,\n            children: []\n          });\n        }\n      } else {\n        currentAccount.fileTree.push({\n          type: \"folder\",\n          name: n,\n          children: []\n        });\n      }\n      saveAccountData();\n      loadFileTree();\n    }\n    \n    // Delete the selected item.\n    function deleteSelected() {\n      if(!selectedItemPath) {\n        alert(\"No file or folder selected to delete.\");\n        return;\n      }\n      if(!confirm(\"Are you sure you want to delete the selected item?\")) return;\n      const segments = selectedItemPath.split(\"/\");\n      \n      function deleteFromTree(tree, segments) {\n        if(!segments.length) return false;\n        const nameToDelete = segments[0];\n        for(let i = 0; i < tree.length; i++) {\n          if(tree[i].name === nameToDelete) {\n            if(segments.length === 1) {\n              tree.splice(i, 1);\n              return true;\n            } else if(tree[i].type === \"folder\" && tree[i].children) {\n              if(deleteFromTree(tree[i].children, segments.slice(1))) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      }\n      \n      if(deleteFromTree(currentAccount.fileTree, segments)) {\n        saveAccountData();\n        selectedItemPath = null;\n        selectedItemType = null;\n        if(currentFile && currentFile.name === segments[segments.length - 1]) {\n          currentFile = null;\n          editor.setValue(\"\");\n          document.getElementById(\"breadcrumb\").textContent = \"No file selected\";\n        }\n        loadFileTree();\n      } else {\n        alert(\"Item not found.\");\n      }\n    }\n    \n    function saveAccountData() {\n      localStorage.setItem(\"account_\" + currentUsername, JSON.stringify(currentAccount));\n    }\n    \n    function saveToRepo() {\n      if(!currentFile) {\n        alert(\"No file open to save.\");\n        return;\n      }\n      const code = editor.getValue(),\n            fp = document.getElementById(\"breadcrumb\").textContent;\n      socket.emit(\"saveRepo\", { code, filePath: fp });\n    }\n    \n    function openHistory() {\n      window.open(\"/history\", \"_blank\");\n    }\n    \n    // Added: Clear selection when clicking outside any file tree item.\n    document.getElementById(\"mainPage\").addEventListener(\"click\", function(e) {\n      // If the click target is not within a file tree <li>, clear selection.\n      if (!e.target.closest(\"#fileTree li\")) {\n        selectedItemPath = null;\n        selectedItemType = null;\n        document.querySelectorAll(\"#fileExplorer li.selected\").forEach(el => el.classList.remove(\"selected\"));\n      }\n    });\n  </script>\n</body>\n</html>\n",
    "filePath": "html file",
    "timestamp": "2025-02-18T02:23:14.034Z",
    "savedBy": "Akash"
  },
  {
    "code": "require(\"dotenv\").config();\nconst rawKey = process.env.GEMINI_API_KEY;\nconst GEMINI_API_KEY = rawKey && rawKey.startsWith(\"sk-\") ? rawKey.substring(3) : rawKey;\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst socketIo = require(\"socket.io\");\nconst { spawn } = require(\"child_process\");\nconst axios = require(\"axios\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\nconst GEMINI_API_ENDPOINT = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\n\nif (!GEMINI_API_KEY) {\n  console.warn(\"Warning: Please set your GEMINI_API_KEY environment variable with a valid API key.\");\n}\n\napp.use(express.static(path.join(__dirname, \"public\")));\napp.get(\"/\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"Gcode.html\"));\n});\n\nconst repoHistoryFile = path.join(__dirname, \"repoHistory.json\");\nlet repoHistory = [];\nif (fs.existsSync(repoHistoryFile)) {\n  try {\n    const data = fs.readFileSync(repoHistoryFile, \"utf8\");\n    repoHistory = JSON.parse(data);\n  } catch (err) {\n    console.error(\"Error reading repoHistory file:\", err);\n  }\n} else {\n  repoHistory = [];\n}\nfunction saveRepoHistory() {\n  fs.writeFileSync(repoHistoryFile, JSON.stringify(repoHistory, null, 2));\n}\n\nlet users = [];\n\nio.on(\"connection\", (socket) => {\n  console.log(\"A user connected\");\n  \n  socket.on(\"setUsername\", (username) => {\n    socket.username = username;\n    if (!users.includes(username)) {\n      users.push(username);\n    }\n    io.emit(\"userList\", users);\n  });\n  \n  socket.on(\"sendMessage\", (data) => {\n    io.emit(\"chatMessage\", data);\n  });\n  \n  socket.on(\"aiSuggestion\", async (data) => {\n    const { code, language } = data;\n    try {\n      const response = await axios.post(\n        `${GEMINI_API_ENDPOINT}?key=${GEMINI_API_KEY}`,\n        { \n          contents: [{ parts: [{ text: `Suggest improvements for the following ${language} code:\\n\\n${code}` }] }] \n        },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      const suggestion = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"No suggestion received.\";\n      socket.emit(\"aiSuggestion\", suggestion);\n    } catch (error) {\n      console.error(\"Error getting AI suggestion:\", error.response?.data || error.message);\n      socket.emit(\"aiSuggestion\", \"Failed to get AI suggestion\");\n    }\n  });\n  \n  socket.on(\"aiCorrection\", async (data) => {\n    const { code, language } = data;\n    try {\n      const prompt = `Analyze and correct the following ${language} code snippet. Fix any syntax errors, improve formatting, and apply best practices. Return only the corrected code as plain text without any explanations, commentary, markdown formatting, or code fences.\\n\\n${code}`;\n      const response = await axios.post(\n        `${GEMINI_API_ENDPOINT}?key=${GEMINI_API_KEY}`,\n        { contents: [{ parts: [{ text: prompt }] }] },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      const correctedCode = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"No correction received.\";\n      socket.emit(\"aiCorrection\", correctedCode);\n    } catch (error) {\n      console.error(\"Error getting AI correction:\", error.response?.data || error.message);\n      socket.emit(\"aiCorrection\", \"Failed to get AI correction\");\n    }\n  });\n  \n  socket.on(\"runCode\", (data) => {\n    const { code, language, input } = data;\n    const id = socket.id;\n    let filename, command, args;\n    if (language === \"javascript\") {\n      filename = `code-${id}.js`;\n      command = \"node\";\n      args = [filename];\n    } else if (language === \"python\") {\n      filename = `code-${id}.py`;\n      command = \"python3\";\n      args = [filename];\n    } else if (language === \"swift\") {\n      filename = `code-${id}.swift`;\n      command = \"swift\";\n      args = [filename];\n    } else if (language === \"c\") {\n      filename = `code-${id}.c`; \n      const executable = `code-${id}`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"gcc\", [filename, \"-o\", executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(`./${executable}`);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"csharp\") {\n      filename = `code-${id}.cs`; \n      const executable = `code-${id}.exe`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"mcs\", [filename, \"-out:\" + executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(\"mono\", [executable]);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"java\") {\n      filename = `Main.java`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"javac\", [filename]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(\"java\", [\"Main\"]);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(\"Main.class\", () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"cpp\") {\n      filename = `code-${id}.cpp`; \n      const executable = `code-${id}`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"g++\", [filename, \"-o\", executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(`./${executable}`);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else { \n      socket.emit(\"runtimeErrors\", \"Unsupported language.\");\n      return;\n    }\n    fs.writeFileSync(filename, code);\n    const child = spawn(command, args);\n    let output = \"\", errOutput = \"\";\n    child.stdout.on(\"data\", (data) => { output += data.toString(); });\n    child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n    child.on(\"close\", () => { \n      let combined = output; \n      if(errOutput) combined += `\\nErrors:\\n${errOutput}`; \n      socket.emit(\"runtimeErrors\", combined); \n      fs.unlink(filename, () => {}); \n    });\n    if (input) { child.stdin.write(input); child.stdin.end(); }\n  });\n  \n  socket.on(\"saveRepo\", (data) => {\n    const { code, filePath } = data;\n    const entry = {\n      code,\n      filePath,\n      timestamp: new Date(),\n      savedBy: socket.username || \"Unknown\"\n    };\n    repoHistory.push(entry);\n    saveRepoHistory();\n    socket.emit(\"repoSaved\", \"Code saved to repo successfully.\");\n  });\n  \n  socket.on(\"sendCode\", (data) => {\n    const { code, recipients } = data;\n    const sender = socket.username || \"Anonymous\";\n    for (const [id, s] of io.of(\"/\").sockets) {\n      if (recipients.includes(s.username)) {\n        s.emit(\"receivedCode\", { from: sender, code });\n      }\n    }\n  });\n  \n  socket.on(\"disconnect\", () => {\n    console.log(\"A user disconnected\");\n    if (socket.username) { \n      users = users.filter(u => u !== socket.username); \n      io.emit(\"userList\", users); \n    }\n  });\n});\n\napp.get(\"/history\", (req, res) => {\n  let html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>Repository History</title>\n    <style>\n      body { background: #000; color: #fff; font-family: 'Roboto Mono', monospace; margin: 0; padding: 20px; }\n      .container { max-width: 800px; margin: 0 auto; }\n      h1 { text-align: center; }\n      .history-list { list-style: none; padding: 0; }\n      .history-list li { padding: 10px; border-bottom: 1px solid #444; }\n      .history-list li a { color: #fff; text-decoration: none; }\n      .history-list li a:hover { text-decoration: underline; }\n      .delete-link { color: red; margin-left: 10px; text-decoration: none; }\n      .delete-link:hover { text-decoration: underline; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Repository History</h1>\n      <ul class=\"history-list\">`;\n  repoHistory.forEach((entry, i) => {\n    html += `<li>\n      <a href=\"/history/${i}\" target=\"_blank\">\n        ${entry.filePath} (${new Date(entry.timestamp).toLocaleString()})\n      </a>\n      <span> — Saved by: ${entry.savedBy || \"Unknown\"}</span>\n      <a class=\"delete-link\" href=\"/deleteRepo/${i}\" onclick=\"return confirm('Are you sure you want to permanently delete this repo entry?');\">[Delete]</a>\n    </li>`;\n  });\n  html += `\n      </ul>\n    </div>\n  </body>\n  </html>\n  `;\n  res.send(html);\n});\n\napp.get(\"/history/:id\", (req, res) => {\n  const id = parseInt(req.params.id, 10);\n  if(isNaN(id) || id < 0 || id >= repoHistory.length){ \n    res.status(404).send(\"Not found\"); \n    return; \n  }\n  const entry = repoHistory[id];\n  function escapeHtml(text) {\n    return text.replace(/&/g, \"&amp;\")\n               .replace(/</g, \"&lt;\")\n               .replace(/>/g, \"&gt;\");\n  }\n  let html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>${entry.filePath} History</title>\n    <style>\n      body { background: #000; color: #fff; font-family: 'Roboto Mono', monospace; margin: 0; padding: 20px; }\n      .container { max-width: 800px; margin: 0 auto; }\n      h1 { text-align: center; margin-bottom: 20px; }\n      .code-box { background: #111; padding: 20px; border-radius: 8px; position: relative; white-space: pre-wrap; word-wrap: break-word; }\n      pre { margin: 0; }\n      .copy-button { position: absolute; top: 10px; right: 10px; background: #333; color: #fff; border: none; padding: 5px 10px; cursor: pointer; border-radius: 4px; }\n      .copy-button:hover { background: #444; }\n      .copy-notification { position: absolute; top: 10px; right: 80px; background: #333; padding: 5px 10px; border-radius: 4px; opacity: 0; transition: opacity 0.5s; display: none; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>${entry.filePath} — Saved by ${entry.savedBy || \"Unknown\"} (${new Date(entry.timestamp).toLocaleString()})</h1>\n      <div class=\"code-box\">\n        <pre id=\"codeText\">${escapeHtml(entry.code)}</pre>\n        <button class=\"copy-button\" id=\"copyButton\">Copy</button>\n        <div class=\"copy-notification\" id=\"copyNotification\">Copied!</div>\n      </div>\n    </div>\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        const copyButton = document.getElementById('copyButton');\n        const copyNotification = document.getElementById('copyNotification');\n        const codeText = document.getElementById('codeText');\n\n        copyButton.addEventListener('click', function() {\n          const text = codeText.innerText;\n          if (navigator.clipboard && window.isSecureContext) {\n            navigator.clipboard.writeText(text).then(function() {\n              showCopyNotification();\n            }).catch(function(err) {\n              console.error('Failed to copy text: ', err);\n              fallbackCopyText(text);\n            });\n          } else {\n            fallbackCopyText(text);\n          }\n        });\n\n        function fallbackCopyText(text) {\n          const textArea = document.createElement('textarea');\n          textArea.value = text;\n          textArea.style.position = 'absolute';\n          textArea.style.left = '-9999px';\n          document.body.appendChild(textArea);\n          textArea.select();\n          try {\n            document.execCommand('copy');\n            showCopyNotification();\n          } catch (err) {\n            console.error('Fallback: Unable to copy', err);\n          }\n          document.body.removeChild(textArea);\n        }\n\n        function showCopyNotification() {\n          copyNotification.style.display = \"block\";\n          copyNotification.style.opacity = 1;\n          setTimeout(() => {\n            copyNotification.style.opacity = 0;\n            setTimeout(() => { copyNotification.style.display = \"none\"; }, 500);\n          }, 1500);\n        }\n      });\n    </script>\n  </body>\n  </html>\n  `;\n  res.send(html);\n});\n\napp.get(\"/deleteRepo/:id\", (req, res) => {\n  const id = parseInt(req.params.id, 10);\n  if(isNaN(id) || id < 0 || id >= repoHistory.length){\n    res.status(404).send(\"Not found\");\n    return;\n  }\n  repoHistory.splice(id, 1);\n  saveRepoHistory();\n  res.redirect(\"/history\");\n});\n\nserver.listen(3000, \"0.0.0.0\", () => {\n  console.log(\"Server running on http://172.16.44.186:3000\");\n});\n",
    "filePath": "new index.js",
    "timestamp": "2025-02-18T02:24:12.119Z",
    "savedBy": "Akash"
  },
  {
    "code": "#include <stdio.h>\n\nint main() {\n    int matrix[3][3], transpose[3][3];\n    int determinant;\n    printf(\"Enter the elements of the 3x3 matrix:\\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            scanf(\"%d \", &matrix[i][j]);\n        }\n\t\tprintf(\"\\n\");\n    }\n    determinant = matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1])\n                - matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])\n                + matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]);\n    printf(\"Determinant of the matrix: %d\\n\", determinant);\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            transpose[i][j] = matrix[j][i];\n        }\n    }\n    printf(\"Transpose of the matrix:\\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", transpose[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n",
    "filePath": "MatrixTranspose&Det",
    "timestamp": "2025-02-18T02:27:23.891Z",
    "savedBy": "Adarsh"
  },
  {
    "code": "# Function to calculate the sum of diagonal elements in a 3x3 matrix\ndef diagonal_sum(matrix):\n    primary_diagonal_sum = 0\n    secondary_diagonal_sum = 0\n    \n    # Primary diagonal: matrix[0][0], matrix[1][1], matrix[2][2]\n    # Secondary diagonal: matrix[0][2], matrix[1][1], matrix[2][0]\n    \n    for i in range(3):\n        primary_diagonal_sum += matrix[i][i]\n        secondary_diagonal_sum += matrix[i][2-i]\n    \n    return primary_diagonal_sum, secondary_diagonal_sum\n\n# Example 3x3 matrix\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprimary_sum, secondary_sum = diagonal_sum(matrix)\n\nprint(f\"Sum of primary diagonal elements: {primary_sum}\")\nprint(f\"Sum of secondary diagonal elements: {secondary_sum}\")\n",
    "filePath": "NFF/Sum of diagonal elements",
    "timestamp": "2025-02-18T02:31:00.557Z",
    "savedBy": "Varshikann"
  },
  {
    "code": "#include <stdio.h>\n\nint main(){\n\tprintf(\"hello\");\n\treturn 0;\n}",
    "filePath": "adarsh/testing",
    "timestamp": "2025-02-18T02:52:51.487Z",
    "savedBy": "adarsh"
  },
  {
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n  <title>Live Code Collaboration</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap\" rel=\"stylesheet\" />\n  <script src=\"/socket.io/socket.io.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/codemirror.min.css\" />\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/codemirror.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/javascript/javascript.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/python/python.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/mode/clike/clike.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/theme/monokai.min.css\" />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/hint/show-hint.min.css\" />\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/hint/show-hint.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/lint.min.css\" />\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/lint.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jshint/2.13.4/jshint.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.0/addon/lint/javascript-lint.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n  <style>\n    body{margin:0;padding:0;font-family:'Roboto Mono',monospace;background:#000;color:#fff;height:100vh;overflow:hidden}\n    #loginPage,#mainPage{position:absolute;width:100%;height:100%}\n    #loginPage{display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:100;transition:opacity .5s;background:#000}\n    #loginPage.hidden{opacity:0;pointer-events:none}\n    #loginPage h1{margin-bottom:20px;font-weight:normal}\n    #loginPage input{padding:10px;width:250px;border-radius:4px;border:1px solid #444;outline:none;margin-bottom:15px;font-size:16px;background:#000;color:#fff}\n    #loginPage button{padding:10px 20px;cursor:pointer;border-radius:4px;border:none;background:#333;color:#fff;font-size:16px;transition:background .3s}\n    #loginPage button:hover{background:#555}\n    #mainPage{display:none;padding:10px;box-sizing:border-box;flex-direction:row;gap:10px;z-index:1}\n    #mainPage.visible{display:flex}\n    #editorContainer{flex:1;display:flex;flex-direction:column;border-radius:8px;overflow:hidden;box-shadow:0 4px 8px rgba(255,255,255,.3);background:#111;position:relative}\n    #editorToolbar,#inputContainer,#breadcrumb,#tabHeader,#tabContent{padding:5px;background:#222;border-radius:4px;font-family:'Roboto Mono',monospace}\n    #editorToolbar{display:flex;gap:10px;align-items:center;flex-wrap:wrap;position:relative}\n    #editorToolbar select,#editorToolbar button{padding:6px 12px;cursor:pointer;border-radius:4px;font-size:14px;border:none;transition:background .3s;background:#333;color:#fff}\n    #editorToolbar select:hover,#editorToolbar button:hover{background:#444}\n    #fileExplorer{position:absolute;top:50px;right:10px;width:250px;background:#222;border:1px solid #444;padding:10px;border-radius:4px;display:none;z-index:15;max-height:80%;overflow-y:auto}\n    #fileExplorer h3,#fileExplorer button{margin:0;display:block}\n    #fileExplorer button{padding:6px 12px;margin:5px 2px;font-size:14px;cursor:pointer;border:none;border-radius:4px;background:#333;color:#fff;transition:background .3s}\n    #fileExplorer button:hover{background:#444}\n    #fileExplorer ul, #fileExplorer ul ul{list-style:none;padding:0;margin:0}\n    #fileExplorer ul ul{margin-left:20px}\n    #fileExplorer li{cursor:pointer;padding:2px 5px;border-radius:3px}\n    #fileExplorer li:hover{background:#333}\n    #fileExplorer li.active{background:#555;font-weight:bold}\n    #fileExplorer li.selected{background:#666;font-weight:bold}\n    #breadcrumb{margin:5px 0;padding:5px 10px;background:#222;border:1px solid #444;border-radius:4px;font-size:14px}\n    #inputContainer{padding:5px;background:#222}\n    #inputField{width:100%;height:50px;background:#111;color:#fff;border:1px solid #444;border-radius:4px;padding:5px;font-size:14px}\n    #tabHeader{display:flex;border-bottom:1px solid #444}\n    #tabHeader button{flex:1;padding:10px;background:#222;border:none;color:#fff;cursor:pointer;transition:background .3s}\n    #tabHeader button.active{background:#333}\n    #tabContent{position:relative;flex:1;overflow:hidden}\n    #codeTab,#outputTab,#receivedCodeTab{position:absolute;top:0;left:0;right:0;bottom:0}\n    .CodeMirror{height:100% !important;font-size:16px;background:#111;font-family:Consolas,\"Courier New\",monospace}\n    .CodeMirror-lines{padding:10px 0}\n    #outputSection{padding:10px;background:#000;font-size:14px;overflow-y:auto;height:100%}\n    #receivedCodeHeader{display:flex;justify-content:space-between;align-items:center;padding:5px;background:#222;position:relative}\n    #receivedCodeContent{background:#111;padding:10px;border-radius:4px;overflow:auto;height:calc(100% - 40px)}\n    .copy-notification{position:absolute;top:10px;right:20px;background:#333;color:#fff;padding:5px 10px;border-radius:4px;font-size:12px;opacity:0;transition:opacity .5s;pointer-events:none}\n    .copy-notification.show{opacity:1}\n    #copyReceivedCodeButton{padding:6px 12px;cursor:pointer;border-radius:4px;border:none;font-size:14px;background:#333;color:#fff;transition:background .3s}\n    #copyReceivedCodeButton:hover{background:#444}\n    #sidebar{width:350px;min-width:300px;background:#000;border-radius:8px;padding:10px;box-shadow:0 4px 8px rgba(255,255,255,.3);display:flex;flex-direction:column}\n    #sidebar h3{margin:10px 0 5px;font-weight:normal}\n    #users{font-size:14px;list-style:none;padding:0;margin:0 0 10px}\n    #users li{margin:2px 0}\n    #chat{flex:1;overflow-y:auto;background:#111;padding:10px;border-radius:4px}\n    #chat p{margin:5px 0}\n    #messageContainer{display:flex;margin-top:10px}\n    #messageInput{flex:1;padding:8px;border-radius:4px;border:1px solid #444;outline:none;margin-right:8px;color:#000;background:#fff}\n    #messageContainer button{padding:10px 16px;cursor:pointer;border-radius:4px;border:none;background:#333;color:#fff;font-size:14px;transition:background .3s}\n    #messageContainer button:hover{background:#555}\n    #sendCodeDropdown{position:absolute;top:50px;left:0;background:#333;padding:10px;border-radius:4px;border:1px solid #444;display:none;z-index:20;min-width:200px}\n    #sendCodeDropdown h4{margin:0 0 5px}\n    #sendCodeUserList{max-height:120px;overflow-y:auto;margin-bottom:10px}\n    #sendCodeUserList label{display:block;margin-bottom:3px}\n    #confirmSendCodeButton{padding:6px 12px;border-radius:4px;border:none;font-size:14px;background:#444;color:#fff;cursor:pointer}\n    #confirmSendCodeButton:hover{background:#555}\n    .CodeMirror-hints{background:#222!important;color:#fff!important;font-family:'Roboto Mono',monospace;border:1px solid #444!important}\n    .CodeMirror-hint{background:#222!important;color:#fff!important;font-family:'Roboto Mono',monospace}\n    .CodeMirror-hint-active{background:#333!important;color:#fff!important;font-family:'Roboto Mono',monospace}\n  </style>\n</head>\n<body>\n  <div id=\"loginPage\">\n    <h1>GCode - Live Code Editor</h1>\n    <input type=\"text\" id=\"usernameInput\" placeholder=\"Enter your name\" />\n    <input type=\"password\" id=\"passwordInput\" placeholder=\"Enter password\" />\n    <button onclick=\"join()\">Join</button>\n  </div>\n  <div id=\"mainPage\">\n    <div id=\"editorContainer\">\n      <div id=\"editorToolbar\">\n        <select id=\"languageSelect\">\n          <option value=\"javascript\">JavaScript</option>\n          <option value=\"python\">Python</option>\n          <option value=\"c\">C</option>\n          <option value=\"csharp\">C#</option>\n          <option value=\"java\">Java</option>\n          <option value=\"swift\">Swift</option>\n          <option value=\"cpp\">C++</option>\n          <option value=\"txt\">Text</option>\n        </select>\n        <button id=\"aiSuggestionButton\">Get AI Suggestion</button>\n        <button id=\"aiCorrectionButton\">Code Correction</button>\n        <button id=\"sendCodeButton\">Send Code</button>\n        <button id=\"runCodeButton\">Run Code</button>\n        <button id=\"saveRepoButton\" onclick=\"saveToRepo()\">Save to Repo</button>\n        <button id=\"historyButton\" onclick=\"openHistory()\">History</button>\n        <button id=\"explorerToggleButton\" onclick=\"toggleExplorer()\">Explorer</button>\n        <div id=\"sendCodeDropdown\">\n          <h4>Select recipients</h4>\n          <div id=\"sendCodeUserList\"></div>\n          <button id=\"confirmSendCodeButton\">Send</button>\n        </div>\n      </div>\n      <div id=\"fileExplorer\">\n        <h3>Explorer</h3>\n        <button onclick=\"createNewFolder()\">New Folder</button>\n        <button onclick=\"createNewFile()\">New File</button>\n        <button onclick=\"renameSelected()\">Rename</button>\n        <button onclick=\"deleteSelected()\">Delete</button>\n        <ul id=\"fileTree\"></ul>\n      </div>\n      <div id=\"inputContainer\">\n        <textarea id=\"inputField\" placeholder=\"Enter input data here\"></textarea>\n      </div>\n      <div id=\"breadcrumb\">No file selected</div>\n      <div id=\"tabHeader\">\n        <button id=\"tabCode\" class=\"active\">Code</button>\n        <button id=\"tabOutput\">Output</button>\n        <button id=\"tabReceivedCode\">Received Code</button>\n      </div>\n      <div id=\"tabContent\">\n        <div id=\"codeTab\">\n          <textarea id=\"editor\"></textarea>\n        </div>\n        <div id=\"outputTab\" style=\"display:none;\">\n          <pre id=\"outputSection\"></pre>\n        </div>\n        <div id=\"receivedCodeTab\" style=\"display:none;\">\n          <div id=\"receivedCodeHeader\">\n            <span id=\"receivedCodeSender\"></span>\n            <button id=\"copyReceivedCodeButton\">Copy</button>\n            <span id=\"copyNotification\" class=\"copy-notification\">Copied!</span>\n          </div>\n          <pre id=\"receivedCodeContent\"></pre>\n        </div>\n      </div>\n    </div>\n    <div id=\"sidebar\">\n      <h3>Online Users</h3>\n      <ul id=\"users\"></ul>\n      <h3>Chat</h3>\n      <div id=\"chat\"></div>\n      <div id=\"messageContainer\">\n        <input id=\"messageInput\" type=\"text\" placeholder=\"Type a message\" />\n        <button onclick=\"sendMessage()\">Send</button>\n      </div>\n    </div>\n  </div>\n  <script>\n    const socket = io(); \n    let username = \"\", currentAccount = null, currentUsername = \"\", currentFile = null, selectedItemPath = null, selectedItemType = null, connectedUsers = [];\n    socket.on(\"repoSaved\", msg => alert(msg));\n    function getUsernameColor(n) {\n      if(n === username) return \"#00FF00\";\n      let h = 0;\n      for(let i = 0; i < n.length; i++){\n        h = n.charCodeAt(i) + ((h << 5) - h);\n      }\n      return `hsl(${Math.abs(h) % 360},70%,50%)`;\n    }\n    function getDisplayName(n) { return n === username ? `(You) ${n}` : n; }\n    function join(){\n      const u = document.getElementById(\"usernameInput\").value.trim(), p = document.getElementById(\"passwordInput\").value;\n      if(!u || !p){ alert(\"Please enter both username and password.\"); return; }\n      const ak = \"account_\" + u; \n      let ad = localStorage.getItem(ak);\n      if(ad){\n        ad = JSON.parse(ad);\n        if(ad.password !== p){ alert(\"Incorrect password.\"); return; }\n      } else {\n        if(!confirm(\"No account found. Create a new account?\")) return;\n        ad = { password: p, fileTree: [] };\n        localStorage.setItem(ak, JSON.stringify(ad));\n      }\n      currentAccount = ad; currentUsername = u; username = u;\n      socket.emit(\"setUsername\", username);\n      document.getElementById(\"loginPage\").classList.add(\"hidden\");\n      setTimeout(() => {\n        document.getElementById(\"loginPage\").style.display = \"none\";\n        document.getElementById(\"mainPage\").classList.add(\"visible\");\n        loadFileTree();\n        editor.refresh();\n      }, 500);\n    }\n    document.getElementById(\"usernameInput\").addEventListener(\"keydown\", e => { if(e.key === \"Enter\") join(); });\n    document.getElementById(\"passwordInput\").addEventListener(\"keydown\", e => { if(e.key === \"Enter\") join(); });\n    const editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n      mode: \"javascript\", theme: \"monokai\", lineNumbers: true, gutters: [\"CodeMirror-lint-markers\"],\n      lint: { esversion: 6 }, smartIndent: true, indentUnit: 4, indentWithTabs: true, extraKeys: { \"Ctrl-Space\": \"autocomplete\" }\n    });\n    editor.on(\"change\", () => { if(currentFile){ currentFile.content = editor.getValue(); saveAccountData(); } });\n    document.getElementById(\"languageSelect\").addEventListener(\"change\", function(){\n      const lang = this.value;\n      editor.setOption(\"mode\",\n        lang === \"javascript\" ? \"javascript\" :\n        lang === \"python\" ? \"python\" :\n        lang === \"c\" ? \"text/x-csrc\" :\n        lang === \"csharp\" ? \"text/x-csharp\" :\n        lang === \"java\" ? \"text/x-java\" :\n        lang === \"swift\" ? \"text/x-swift\" :\n        lang === \"cpp\" ? \"text/x-c++src\" :\n        lang === \"txt\" ? \"text/plain\" : lang\n      );\n    });\n    document.getElementById(\"aiSuggestionButton\").addEventListener(\"click\", () => {\n      socket.emit(\"aiSuggestion\", { code: editor.getValue(), language: document.getElementById(\"languageSelect\").value });\n    });\n    document.getElementById(\"aiCorrectionButton\").addEventListener(\"click\", () => {\n      socket.emit(\"aiCorrection\", { code: editor.getValue(), language: document.getElementById(\"languageSelect\").value });\n    });\n    const sendCodeButton = document.getElementById(\"sendCodeButton\"), sendCodeDropdown = document.getElementById(\"sendCodeDropdown\");\n    sendCodeButton.addEventListener(\"click\", () => {\n      sendCodeDropdown.style.display === \"none\" || !sendCodeDropdown.style.display\n        ? (buildSendUserList(), sendCodeDropdown.style.display = \"block\")\n        : (sendCodeDropdown.style.display = \"none\");\n    });\n    function buildSendUserList(){\n      const container = document.getElementById(\"sendCodeUserList\");\n      container.innerHTML = \"\";\n      connectedUsers.forEach(user => {\n        if(user !== username){\n          const label = document.createElement(\"label\"), checkbox = document.createElement(\"input\");\n          checkbox.type = \"checkbox\"; checkbox.value = user;\n          label.appendChild(checkbox);\n          label.appendChild(document.createTextNode(\" \" + user));\n          container.appendChild(label);\n        }\n        container.appendChild(document.createElement(\"br\"));\n      });\n    }\n    document.getElementById(\"confirmSendCodeButton\").addEventListener(\"click\", () => {\n      const checkedBoxes = document.querySelectorAll(\"#sendCodeUserList input[type='checkbox']:checked\"),\n            recipients = Array.from(checkedBoxes).map(cb => cb.value);\n      if(!recipients.length){ alert(\"No recipients selected!\"); return; }\n      socket.emit(\"sendCode\", { code: editor.getValue(), recipients });\n      sendCodeDropdown.style.display = \"none\";\n    });\n    document.getElementById(\"runCodeButton\").addEventListener(\"click\", () => {\n      socket.emit(\"runCode\", { code: editor.getValue(), language: document.getElementById(\"languageSelect\").value, input: document.getElementById(\"inputField\").value });\n    });\n    socket.on(\"userList\", u => {\n      connectedUsers = u;\n      const ul = document.getElementById(\"users\"); ul.innerHTML = \"\";\n      u.forEach(n => {\n        const li = document.createElement(\"li\");\n        li.textContent = getDisplayName(n);\n        li.style.color = getUsernameColor(n);\n        ul.appendChild(li);\n      });\n    });\n    socket.on(\"receivedCode\", d => {\n      document.getElementById(\"receivedCodeSender\").textContent = `${d.from} sent you code`;\n      document.getElementById(\"receivedCodeContent\").textContent = d.code;\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.add(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"block\";\n    });\n    document.getElementById(\"tabCode\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabCode\").classList.add(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"block\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"none\";\n      editor.refresh();\n    });\n    document.getElementById(\"tabOutput\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabOutput\").classList.add(\"active\");\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabReceivedCode\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"block\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"none\";\n    });\n    document.getElementById(\"tabReceivedCode\").addEventListener(\"click\", () => {\n      document.getElementById(\"tabReceivedCode\").classList.add(\"active\");\n      document.getElementById(\"tabCode\").classList.remove(\"active\");\n      document.getElementById(\"tabOutput\").classList.remove(\"active\");\n      document.getElementById(\"codeTab\").style.display = \"none\";\n      document.getElementById(\"outputTab\").style.display = \"none\";\n      document.getElementById(\"receivedCodeTab\").style.display = \"block\";\n    });\n    document.getElementById(\"copyReceivedCodeButton\").addEventListener(\"click\", copyReceivedCode);\n    function copyReceivedCode(){\n      const code = document.getElementById(\"receivedCodeContent\").innerText;\n      if(navigator.clipboard){\n        navigator.clipboard.writeText(code).then(showCopyNotification).catch(err => console.error(\"Failed to copy code\", err));\n      } else fallbackCopyText(code);\n    }\n    function fallbackCopyText(text){\n      const textarea = document.createElement(\"textarea\");\n      textarea.value = text;\n      textarea.style.position = 'fixed';\n      textarea.style.left = '-9999px';\n      document.body.appendChild(textarea);\n      textarea.select();\n      try { document.execCommand('copy'); showCopyNotification(); }\n      catch(err){ console.error(\"Fallback: Unable to copy\", err); }\n      document.body.removeChild(textarea);\n    }\n    function showCopyNotification(){\n      const n = document.getElementById(\"copyNotification\");\n      n.classList.add(\"show\");\n      setTimeout(() => { n.classList.remove(\"show\"); }, 1500);\n    }\n    function sendMessage(){\n      const m = document.getElementById(\"messageInput\").value.trim();\n      if(m){ socket.emit(\"sendMessage\", { username, message: m }); document.getElementById(\"messageInput\").value = \"\"; }\n    }\n    document.getElementById(\"messageInput\").addEventListener(\"keydown\", e => { if(e.key === \"Enter\") sendMessage(); });\n    socket.on(\"aiSuggestion\", s => { alert(s ? \"AI Suggestion: \" + s : \"No suggestion received.\"); });\n    socket.on(\"aiCorrection\", c => { \n      if(c && c !== \"Failed to get AI correction\"){ \n        editor.setValue(c); \n        alert(\"Code corrected and updated in editor.\"); \n      } else alert(\"AI Correction failed. Please check your API key or try again.\"); \n    });\n    socket.on(\"runtimeErrors\", o => { document.getElementById(\"outputSection\").innerHTML = o || \"No output.\"; });\n    socket.on(\"chatMessage\", d => {\n      const p = document.createElement(\"p\"), span = document.createElement(\"span\");\n      span.textContent = getDisplayName(d.username);\n      span.style.color = getUsernameColor(d.username);\n      p.appendChild(span);\n      p.appendChild(document.createTextNode(\": \" + d.message));\n      document.getElementById(\"chat\").appendChild(p);\n      document.getElementById(\"chat\").scrollTop = document.getElementById(\"chat\").scrollHeight;\n    });\n    function toggleExplorer(){\n      const e = document.getElementById(\"fileExplorer\");\n      e.style.display = (e.style.display === \"none\" || !e.style.display) ? \"block\" : \"none\";\n    }\n    function loadFileTree(){\n      const t = currentAccount.fileTree || [];\n      renderFileTree(t, document.getElementById(\"fileTree\"));\n    }\n    // UPDATED: renderFileTree with stopPropagation on file items to prevent folder toggling\n    function renderFileTree(tree, container, currentPath = \"\"){\n      container.innerHTML = \"\";\n      tree.forEach((item, index) => {\n        const li = document.createElement(\"li\");\n        const fullPath = currentPath ? currentPath + \"/\" + item.name : item.name;\n        li.textContent = item.name;\n        li.dataset.fullPath = fullPath;\n        li.dataset.index = index;\n        li.dataset.type = item.type;\n        if(item.type === \"file\" && currentFile && currentFile.name === item.name)\n          li.classList.add(\"active\");\n        if(selectedItemPath && li.dataset.fullPath === selectedItemPath)\n          li.classList.add(\"selected\");\n        if(item.type === \"file\"){\n          li.addEventListener(\"click\", e => {\n            e.stopPropagation(); // Prevent bubbling so folder doesn't toggle\n            selectItem(li);\n            openFile(item, fullPath);\n          });\n        } else if(item.type === \"folder\"){\n          li.addEventListener(\"click\", e => {\n            e.stopPropagation();\n            selectItem(li);\n            const childUl = li.querySelector(\"ul\");\n            if(childUl)\n              childUl.style.display = childUl.style.display === \"none\" ? \"block\" : \"none\";\n          });\n          if(item.children && item.children.length){\n            const childUl = document.createElement(\"ul\");\n            renderFileTree(item.children, childUl, fullPath);\n            li.appendChild(childUl);\n          }\n        }\n        container.appendChild(li);\n      });\n    }\n    function selectItem(li){\n      selectedItemPath = li.dataset.fullPath;\n      selectedItemType = li.dataset.type;\n      document.querySelectorAll(\"#fileExplorer li\").forEach(el => el.classList.remove(\"selected\"));\n      li.classList.add(\"selected\");\n    }\n    function openFile(file, fullPath){\n      if(file.type === \"file\"){\n        currentFile = file;\n        editor.setValue(file.content || \"\");\n        editor.refresh();\n        document.getElementById(\"breadcrumb\").textContent = fullPath;\n      }\n    }\n    function findItemByPath(tree, segments){\n      if(!segments.length) return null;\n      let name = segments[0];\n      for(let item of tree){\n        if(item.name === name){\n          if(segments.length === 1) return item;\n          else if(item.type === \"folder\" && item.children)\n            return findItemByPath(item.children, segments.slice(1));\n        }\n      }\n      return null;\n    }\n    function createNewFile(){\n      let n = prompt(\"Enter new file name:\");\n      if(!n) return;\n      if(selectedItemType === \"folder\"){\n        let segments = selectedItemPath.split(\"/\"), folder = findItemByPath(currentAccount.fileTree, segments);\n        if(folder && folder.type === \"folder\"){\n          if(!folder.children) folder.children = [];\n          folder.children.push({ type:\"file\", name:n, content:\"\" });\n        }\n      } else {\n        currentAccount.fileTree.push({ type:\"file\", name:n, content:\"\" });\n      }\n      saveAccountData();\n      loadFileTree();\n    }\n    function createNewFolder(){\n      let n = prompt(\"Enter new folder name:\");\n      if(!n) return;\n      if(selectedItemType === \"folder\"){\n        let segments = selectedItemPath.split(\"/\"), folder = findItemByPath(currentAccount.fileTree, segments);\n        if(folder && folder.type === \"folder\"){\n          if(!folder.children) folder.children = [];\n          folder.children.push({ type:\"folder\", name:n, children:[] });\n        }\n      } else {\n        currentAccount.fileTree.push({ type:\"folder\", name:n, children:[] });\n      }\n      saveAccountData();\n      loadFileTree();\n    }\n    function renameSelected(){\n      if(!selectedItemPath){ alert(\"No file or folder selected to rename.\"); return; }\n      let newName = prompt(\"Enter new name for selected item:\", \"\");\n      if(!newName) return;\n      let segments = selectedItemPath.split(\"/\"), oldName = segments[segments.length-1];\n      if(newName === oldName) return;\n      if(renameItemInTree(currentAccount.fileTree, segments, newName)){\n        segments[segments.length-1] = newName;\n        selectedItemPath = segments.join(\"/\");\n        if(currentFile && currentFile.name === oldName){\n          currentFile.name = newName;\n          document.getElementById(\"breadcrumb\").textContent = selectedItemPath;\n        }\n        saveAccountData();\n        loadFileTree();\n      } else { alert(\"Item not found.\"); }\n    }\n    function renameItemInTree(tree, segments, newName){\n      if(!segments.length) return false;\n      let currentSegment = segments[0];\n      for(let i = 0; i < tree.length; i++){\n        if(tree[i].name === currentSegment){\n          if(segments.length === 1){ tree[i].name = newName; return true; }\n          else if(tree[i].type === \"folder\" && tree[i].children){\n            if(renameItemInTree(tree[i].children, segments.slice(1), newName)) return true;\n          }\n        }\n      }\n      return false;\n    }\n    function deleteSelected(){\n      if(!selectedItemPath){ alert(\"No file or folder selected to delete.\"); return; }\n      if(!confirm(\"Are you sure you want to delete the selected item?\")) return;\n      let segments = selectedItemPath.split(\"/\");\n      function deleteFromTree(tree, segments){\n        if(!segments.length) return false;\n        let nameToDelete = segments[0];\n        for(let i = 0; i < tree.length; i++){\n          if(tree[i].name === nameToDelete){\n            if(segments.length === 1){ tree.splice(i, 1); return true; }\n            else if(tree[i].type === \"folder\" && tree[i].children){\n              if(deleteFromTree(tree[i].children, segments.slice(1))) return true;\n            }\n          }\n        }\n        return false;\n      }\n      if(deleteFromTree(currentAccount.fileTree, segments)){\n        saveAccountData();\n        selectedItemPath = null;\n        selectedItemType = null;\n        if(currentFile && currentFile.name === segments[segments.length-1]){\n          currentFile = null;\n          editor.setValue(\"\");\n          document.getElementById(\"breadcrumb\").textContent = \"No file selected\";\n        }\n        loadFileTree();\n      } else { alert(\"Item not found.\"); }\n    }\n    function saveAccountData(){\n      localStorage.setItem(\"account_\" + currentUsername, JSON.stringify(currentAccount));\n    }\n    function saveToRepo(){\n      if(!currentFile){ alert(\"No file open to save.\"); return; }\n      let code = editor.getValue(), fp = document.getElementById(\"breadcrumb\").textContent;\n      socket.emit(\"saveRepo\", { code, filePath: fp });\n    }\n    function openHistory(){ window.open(\"/history\", \"_blank\"); }\n    document.getElementById(\"mainPage\").addEventListener(\"click\", e => {\n      if(!e.target.closest(\"#fileTree li\")){\n        selectedItemPath = null;\n        selectedItemType = null;\n        document.querySelectorAll(\"#fileExplorer li.selected\").forEach(el => el.classList.remove(\"selected\"));\n      }\n    });\n  </script>\n</body>\n</html>\n",
    "filePath": "makathon/final html file",
    "timestamp": "2025-02-18T02:58:47.421Z",
    "savedBy": "Akash"
  },
  {
    "code": "require(\"dotenv\").config();\nconst rawKey = process.env.GEMINI_API_KEY;\nconst GEMINI_API_KEY = rawKey && rawKey.startsWith(\"sk-\") ? rawKey.substring(3) : rawKey;\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst socketIo = require(\"socket.io\");\nconst { spawn } = require(\"child_process\");\nconst axios = require(\"axios\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\nconst GEMINI_API_ENDPOINT = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\n\nif (!GEMINI_API_KEY) {\n  console.warn(\"Warning: Please set your GEMINI_API_KEY environment variable with a valid API key.\");\n}\n\napp.use(express.static(path.join(__dirname, \"public\")));\napp.get(\"/\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"Gcode.html\"));\n});\n\nconst repoHistoryFile = path.join(__dirname, \"repoHistory.json\");\nlet repoHistory = [];\nif (fs.existsSync(repoHistoryFile)) {\n  try {\n    const data = fs.readFileSync(repoHistoryFile, \"utf8\");\n    repoHistory = JSON.parse(data);\n  } catch (err) {\n    console.error(\"Error reading repoHistory file:\", err);\n  }\n} else {\n  repoHistory = [];\n}\nfunction saveRepoHistory() {\n  fs.writeFileSync(repoHistoryFile, JSON.stringify(repoHistory, null, 2));\n}\n\nlet users = [];\n\nio.on(\"connection\", (socket) => {\n  console.log(\"A user connected\");\n  \n  socket.on(\"setUsername\", (username) => {\n    socket.username = username;\n    if (!users.includes(username)) {\n      users.push(username);\n    }\n    io.emit(\"userList\", users);\n  });\n  \n  socket.on(\"sendMessage\", (data) => {\n    io.emit(\"chatMessage\", data);\n  });\n  \n  socket.on(\"aiSuggestion\", async (data) => {\n    const { code, language } = data;\n    try {\n      const response = await axios.post(\n        `${GEMINI_API_ENDPOINT}?key=${GEMINI_API_KEY}`,\n        { \n          contents: [{ parts: [{ text: `Suggest improvements for the following ${language} code:\\n\\n${code}` }] }] \n        },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      const suggestion = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"No suggestion received.\";\n      socket.emit(\"aiSuggestion\", suggestion);\n    } catch (error) {\n      console.error(\"Error getting AI suggestion:\", error.response?.data || error.message);\n      socket.emit(\"aiSuggestion\", \"Failed to get AI suggestion\");\n    }\n  });\n  \n  socket.on(\"aiCorrection\", async (data) => {\n    const { code, language } = data;\n    try {\n      const prompt = `Analyze and correct the following ${language} code snippet. Fix any syntax errors, improve formatting, and apply best practices. Return only the corrected code as plain text without any explanations, commentary, markdown formatting, or code fences.\\n\\n${code}`;\n      const response = await axios.post(\n        `${GEMINI_API_ENDPOINT}?key=${GEMINI_API_KEY}`,\n        { contents: [{ parts: [{ text: prompt }] }] },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      const correctedCode = response.data.candidates?.[0]?.content?.parts?.[0]?.text || \"No correction received.\";\n      socket.emit(\"aiCorrection\", correctedCode);\n    } catch (error) {\n      console.error(\"Error getting AI correction:\", error.response?.data || error.message);\n      socket.emit(\"aiCorrection\", \"Failed to get AI correction\");\n    }\n  });\n  \n  socket.on(\"runCode\", (data) => {\n    const { code, language, input } = data;\n    const id = socket.id;\n    let filename, command, args;\n    if (language === \"javascript\") {\n      filename = `code-${id}.js`;\n      command = \"node\";\n      args = [filename];\n    } else if (language === \"python\") {\n      filename = `code-${id}.py`;\n      command = \"python3\";\n      args = [filename];\n    } else if (language === \"swift\") {\n      filename = `code-${id}.swift`;\n      command = \"swift\";\n      args = [filename];\n    } else if (language === \"c\") {\n      filename = `code-${id}.c`; \n      const executable = `code-${id}`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"gcc\", [filename, \"-o\", executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(`./${executable}`);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"csharp\") {\n      filename = `code-${id}.cs`; \n      const executable = `code-${id}.exe`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"mcs\", [filename, \"-out:\" + executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(\"mono\", [executable]);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"java\") {\n      filename = `Main.java`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"javac\", [filename]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(\"java\", [\"Main\"]);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(\"Main.class\", () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else if (language === \"cpp\") {\n      filename = `code-${id}.cpp`; \n      const executable = `code-${id}`;\n      fs.writeFileSync(filename, code);\n      const compile = spawn(\"g++\", [filename, \"-o\", executable]);\n      let compileError = \"\";\n      compile.stderr.on(\"data\", (data) => { compileError += data.toString(); });\n      compile.on(\"close\", (exitCode) => {\n        if (exitCode !== 0) {\n          socket.emit(\"runtimeErrors\", `Compilation Error:\\n${compileError}`);\n          fs.unlink(filename, () => {});\n        } else {\n          const child = spawn(`./${executable}`);\n          let output = \"\", errOutput = \"\";\n          child.stdout.on(\"data\", (data) => { output += data.toString(); });\n          child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n          child.on(\"close\", () => {\n            let combined = output;\n            if(errOutput) combined += `\\nErrors:\\n${errOutput}`;\n            socket.emit(\"runtimeErrors\", combined);\n            fs.unlink(filename, () => {});\n            fs.unlink(executable, () => {});\n          });\n          if (input) { child.stdin.write(input); child.stdin.end(); }\n        }\n      });\n      return;\n    } else { \n      socket.emit(\"runtimeErrors\", \"Unsupported language.\");\n      return;\n    }\n    fs.writeFileSync(filename, code);\n    const child = spawn(command, args);\n    let output = \"\", errOutput = \"\";\n    child.stdout.on(\"data\", (data) => { output += data.toString(); });\n    child.stderr.on(\"data\", (data) => { errOutput += data.toString(); });\n    child.on(\"close\", () => { \n      let combined = output; \n      if(errOutput) combined += `\\nErrors:\\n${errOutput}`; \n      socket.emit(\"runtimeErrors\", combined); \n      fs.unlink(filename, () => {}); \n    });\n    if (input) { child.stdin.write(input); child.stdin.end(); }\n  });\n  \n  socket.on(\"saveRepo\", (data) => {\n    const { code, filePath } = data;\n    const entry = {\n      code,\n      filePath,\n      timestamp: new Date(),\n      savedBy: socket.username || \"Unknown\"\n    };\n    repoHistory.push(entry);\n    saveRepoHistory();\n    socket.emit(\"repoSaved\", \"Code saved to repo successfully.\");\n  });\n  \n  socket.on(\"sendCode\", (data) => {\n    const { code, recipients } = data;\n    const sender = socket.username || \"Anonymous\";\n    for (const [id, s] of io.of(\"/\").sockets) {\n      if (recipients.includes(s.username)) {\n        s.emit(\"receivedCode\", { from: sender, code });\n      }\n    }\n  });\n  \n  socket.on(\"disconnect\", () => {\n    console.log(\"A user disconnected\");\n    if (socket.username) { \n      users = users.filter(u => u !== socket.username); \n      io.emit(\"userList\", users); \n    }\n  });\n});\n\napp.get(\"/history\", (req, res) => {\n  let html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>Repository History</title>\n    <style>\n      body { background: #000; color: #fff; font-family: 'Roboto Mono', monospace; margin: 0; padding: 20px; }\n      .container { max-width: 800px; margin: 0 auto; }\n      h1 { text-align: center; }\n      .history-list { list-style: none; padding: 0; }\n      .history-list li { padding: 10px; border-bottom: 1px solid #444; }\n      .history-list li a { color: #fff; text-decoration: none; }\n      .history-list li a:hover { text-decoration: underline; }\n      .delete-link { color: red; margin-left: 10px; text-decoration: none; }\n      .delete-link:hover { text-decoration: underline; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Repository History</h1>\n      <ul class=\"history-list\">`;\n  repoHistory.forEach((entry, i) => {\n    html += `<li>\n      <a href=\"/history/${i}\" target=\"_blank\">\n        ${entry.filePath} (${new Date(entry.timestamp).toLocaleString()})\n      </a>\n      <span> — Saved by: ${entry.savedBy || \"Unknown\"}</span>\n      <a class=\"delete-link\" href=\"/deleteRepo/${i}\" onclick=\"return confirm('Are you sure you want to permanently delete this repo entry?');\">[Delete]</a>\n    </li>`;\n  });\n  html += `\n      </ul>\n    </div>\n  </body>\n  </html>\n  `;\n  res.send(html);\n});\n\napp.get(\"/history/:id\", (req, res) => {\n  const id = parseInt(req.params.id, 10);\n  if(isNaN(id) || id < 0 || id >= repoHistory.length){ \n    res.status(404).send(\"Not found\"); \n    return; \n  }\n  const entry = repoHistory[id];\n  function escapeHtml(text) {\n    return text.replace(/&/g, \"&amp;\")\n               .replace(/</g, \"&lt;\")\n               .replace(/>/g, \"&gt;\");\n  }\n  let html = `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>${entry.filePath} History</title>\n    <style>\n      body { background: #000; color: #fff; font-family: 'Roboto Mono', monospace; margin: 0; padding: 20px; }\n      .container { max-width: 800px; margin: 0 auto; }\n      h1 { text-align: center; margin-bottom: 20px; }\n      .code-box { background: #111; padding: 20px; border-radius: 8px; position: relative; white-space: pre-wrap; word-wrap: break-word; }\n      pre { margin: 0; }\n      .copy-button { position: absolute; top: 10px; right: 10px; background: #333; color: #fff; border: none; padding: 5px 10px; cursor: pointer; border-radius: 4px; }\n      .copy-button:hover { background: #444; }\n      .copy-notification { position: absolute; top: 10px; right: 80px; background: #333; padding: 5px 10px; border-radius: 4px; opacity: 0; transition: opacity 0.5s; display: none; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>${entry.filePath} — Saved by ${entry.savedBy || \"Unknown\"} (${new Date(entry.timestamp).toLocaleString()})</h1>\n      <div class=\"code-box\">\n        <pre id=\"codeText\">${escapeHtml(entry.code)}</pre>\n        <button class=\"copy-button\" id=\"copyButton\">Copy</button>\n        <div class=\"copy-notification\" id=\"copyNotification\">Copied!</div>\n      </div>\n    </div>\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        const copyButton = document.getElementById('copyButton');\n        const copyNotification = document.getElementById('copyNotification');\n        const codeText = document.getElementById('codeText');\n\n        copyButton.addEventListener('click', function() {\n          const text = codeText.innerText;\n          if (navigator.clipboard && window.isSecureContext) {\n            navigator.clipboard.writeText(text).then(function() {\n              showCopyNotification();\n            }).catch(function(err) {\n              console.error('Failed to copy text: ', err);\n              fallbackCopyText(text);\n            });\n          } else {\n            fallbackCopyText(text);\n          }\n        });\n\n        function fallbackCopyText(text) {\n          const textArea = document.createElement('textarea');\n          textArea.value = text;\n          textArea.style.position = 'absolute';\n          textArea.style.left = '-9999px';\n          document.body.appendChild(textArea);\n          textArea.select();\n          try {\n            document.execCommand('copy');\n            showCopyNotification();\n          } catch (err) {\n            console.error('Fallback: Unable to copy', err);\n          }\n          document.body.removeChild(textArea);\n        }\n\n        function showCopyNotification() {\n          copyNotification.style.display = \"block\";\n          copyNotification.style.opacity = 1;\n          setTimeout(() => {\n            copyNotification.style.opacity = 0;\n            setTimeout(() => { copyNotification.style.display = \"none\"; }, 500);\n          }, 1500);\n        }\n      });\n    </script>\n  </body>\n  </html>\n  `;\n  res.send(html);\n});\n\napp.get(\"/deleteRepo/:id\", (req, res) => {\n  const id = parseInt(req.params.id, 10);\n  if(isNaN(id) || id < 0 || id >= repoHistory.length){\n    res.status(404).send(\"Not found\");\n    return;\n  }\n  repoHistory.splice(id, 1);\n  saveRepoHistory();\n  res.redirect(\"/history\");\n});\n\nserver.listen(3000, \"0.0.0.0\", () => {\n  console.log(\"Server running on http://172.16.44.186:3000\");\n});\n",
    "filePath": "makathon/final index.js",
    "timestamp": "2025-02-18T02:59:15.352Z",
    "savedBy": "Akash"
  },
  {
    "code": "GEMINI_API_KEY=AIzaSyCa0DureCHfXdY9tgFp8x3TK-1AN2AzZz0\nGEMINI_API_ENDPOINT=https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\nGEMINI_MODEL=gemini-model-1\n",
    "filePath": "makathon/final .env",
    "timestamp": "2025-02-18T03:01:00.990Z",
    "savedBy": "Akash"
  }
]